pipeline {
	agent {
		label 'CAF-AWS-Slave'
	}
	tools {
		jdk 'JDK8'
		maven 'Maven 3.2.1'
	}

	stages {
		stage('Pulling project into workspace') {
			steps {
				script {
					env.SCM_GIT_CURRENT_BRANCH="JenkinsNewB"
					try {
					def scmVars =checkout([
					$class: 'GitSCM', 
					branches: [[name: "*/${SCM_GIT_CURRENT_BRANCH}"]], 
					doGenerateSubmoduleConfigurations: false, 
					extensions: [[$class: 'LocalBranch', localBranch: "${SCM_GIT_CURRENT_BRANCH}"]], 
					submoduleCfg: [], 
					userRemoteConfigs: 
					[
						[
							credentialsId: 'ReadAccessBitbucket', 
							url: 'https://bitbucket.boigroup.net/scm/caf/uxp-test-automation.git'
						]
					] 
					])							
					echo "commit ID --> ${scmVars.GIT_COMMIT}"
					echo "Branch ID --> ${scmVars.GIT_BRANCH}"
					env.GIT_COMMIT="${scmVars.GIT_COMMIT}"
					env.GIT_BRANCH="${scmVars.GIT_BRANCH}"
					
					print "Values passed to the Job"
					print "${PLATFORM}"
					print "${TYPE}"
					print "${PREFERRED_BROWSER}"
					print "${ISMOCKINGENABLED}"
					print "${HUBURL}"
					print "${TAGTORUN}"
					print "${PARALLEL_COUNT}"
					print "${REPORT_TYPE}"
					print "${EXCEL_CONFIGURATION}"
					print "${EXCEL_CONFIGURATION_FILEPATH}"
					print "${TEST_DATA_FILEPATH}"
					}
					catch (err) {
						error "Error encountered during pull of repository into workspace"
					} 
				}
			}
		}
		stage('Start Wiremock') {
		    when {
		        expression { params.ISMOCKINGENABLED == 'TRUE' }
		    }
		    agent {
                label '1423_EMSTest'
            }		    
			steps {
				script {
					withMaven(jdk: 'JDK8', maven: 'Maven 3.2.1') {
					    bat"""
					    net start qa-automation-wiremock || EXIT /B 0
					    """
					}
				}
			}
		}		
		stage('Running tests according to stories files') {
			steps {
				script {
					withMaven(jdk: 'JDK8', maven: 'Maven 3.2.1') {				    
						bat"""
						cd Base-UXP
						mvn clean -PParallelExecution install
						"""
					}
				}
			}
		}
		stage('Report generation and publishing') {
			steps {
				script {
					try {
						allure jdk: 'JDK8', report: 'Base-UXP/target/allure-report', results: [[path: 'Base-UXP/target/allure-results']]
					}
					catch (err) {
						error "Error encountered during Allure report generation" + err.toString()
					}
					try {
						junit 'Base-UXP/target/surefire-reports/*.xml'
					}
					catch (err) {
						error "Error encountered during JUnit test results publishing"
					}
				}
			}
		}
		stage('Stop Wiremock') {
		    when {
		        expression { params.ISMOCKINGENABLED == 'TRUE' }
		    }
		    agent {
                label '1423_EMSTest'
            }		    
			steps {
				script {
					withMaven(jdk: 'JDK8', maven: 'Maven 3.2.1') {
					    bat"""
					    net stop qa-automation-wiremock || EXIT /B 0
					    """
					}
				}
			}
		}			
	
	
	stage('Send email') {
	steps{
        emailext body: '''${SCRIPT, template="email.template"}''',
        mimeType: 'text/html',
        subject: "[Jenkins] currentBuild.fullDisplayName",
        to: "saylee.kuyeskar@boi.com, Atmaj.Bhushan@boi.com, Priyanka.Inamdar@boi.com",
        replyTo: "saylee.kuyeskar@boi.com",
        recipientProviders: [[$class: 'CulpritsRecipientProvider']]
		}
} 
}
}



%%%%%%%%%%%%%%%

package com.boi.grp.utilities;

import org.apache.log4j.Logger;

import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Created by C112083 on 25/01/2021.
 */
public class FeatureUtils {
    public Logger logMan;

    public FeatureUtils(){
        logMan = LogManagerPreRun.getInstance();
    }


    public void readAllFeatureFile(String initialPath,String finalPath,Map<String,List<Map<String,String>>> testData,Map<String,List<String>> colNamePerScenarioTestData) throws Exception{
        try {
            File file=new File(System.getProperty("user.dir")+"/"+initialPath);
            String[] featureArray = file.list();
            for (String featureName:featureArray) {
                FileReader filereader=new FileReader(System.getProperty("user.dir")+"/"+initialPath+"/"+featureName);
                BufferedReader bufferedReader=new BufferedReader(filereader);
                StringBuilder stringBuilder=new StringBuilder();
                String line =bufferedReader.readLine();
                while(line!=null){
                    stringBuilder.append(line+"!!");
                    line=bufferedReader.readLine();
                }
                String featureInOneLine =stringBuilder.toString();
                //logMan.debug("old data"+stringBuilder.toString());
                String featureWithAppendedData = getScenarioNameAndParseForEachOfThem(featureInOneLine,testData,colNamePerScenarioTestData);
                //logMan.debug("new data = "+featureWithAppendedData);
                PrintWriter printWriter=new PrintWriter(new FileWriter(System.getProperty("user.dir")+"/"+finalPath+"/"+featureName));
                String[] arr = featureWithAppendedData.split("!!");
                for (String featureLine :arr) {
                    printWriter.println(featureLine);
                }
                printWriter.flush();
                printWriter.close();
                logMan.info("New Feature file = "+featureName+" is created with data appended from Excel file at location = "+finalPath);
            }
        } catch (IOException e) {
            logMan.error("Error in readAllFeatureFile, Error =  "+e.getMessage());
        }
    }


    public String getScenarioNameAndParseForEachOfThem(String text, Map<String,List<Map<String,String>>> data,Map<String,List<String>> colNamePerScenarioTestData){
        String newText= null;
        try {
            newText = text;
            List<Integer> listOfScenarioIndex = searchPatternForScenario("Scenario",newText);
            String splitter="!!";

            for (int i=0;i<listOfScenarioIndex.size();i++){
                if(newText.length()!=text.length()){
                    listOfScenarioIndex=searchPatternForScenario("Scenario",newText);
                }
                int endpoint = newText.indexOf(splitter, listOfScenarioIndex.get(i));
                String textWithScenarioName=newText.substring(listOfScenarioIndex.get(i),endpoint);
                String scenarioName = textWithScenarioName.split(":")[1].trim();
                if(data.containsKey(scenarioName) && data.get(scenarioName).size()!=0){
                    logMan.info("Test data for scenarioName, '"+scenarioName+"' is = "+data.get(scenarioName));
                    newText=parseFeatureFileAndAppendDataFromExcelFile(newText,splitter,scenarioName,data,colNamePerScenarioTestData);
                }
            }
        } catch (Exception e) {
            logMan.error("Error in getScenarioNameAndParseForEachOfThem method, Error = "+e.getMessage());
        }
        return newText;
    }

    public String parseFeatureFileAndAppendDataFromExcelFile(String text, String splitter, String regex,Map<String,List<Map<String,String>>> testData,Map<String,List<String>> colNamePerScenarioTestData ){
        //List<Integer> scenarioRegex1 = searchPattern(regex, text);
        List<Integer> scenarioRegex = searchPatternUsingIndex(regex, text, 0);
        int value = text.lastIndexOf("Scenario", scenarioRegex.get(0));
        String outlineSubstring = text.substring(value, scenarioRegex.get(0));
        if(outlineSubstring.contains("Outline")){
            //logic for outline
            List<Integer> examplesRegex = searchPatternUsingIndex("Examples",text, scenarioRegex.get(1));
            //code for number of spaces
            int spacePosition = text.lastIndexOf("!",examplesRegex.get(0));
            String spaceToBeAdded=text.substring(spacePosition+1,examplesRegex.get(0))+"  ";

            int startIndex = text.indexOf(splitter, examplesRegex.get(1))+splitter.length();
            String firstDataForExamplesHeader = text.substring(0, startIndex);
            String secondDataForExamplesHeader=text.substring(startIndex);
            //for list of column names for each scenarioName
            List<String> list = colNamePerScenarioTestData.get(regex);
            StringBuilder build = new StringBuilder();
            build.append(spaceToBeAdded).append("|");
            for (String aList : list) {
                build.append(aList).append("|");
            }
            build.append(splitter);
            text=firstDataForExamplesHeader+build.toString()+secondDataForExamplesHeader;
            //logic for appending data for examples section
            int endIndex=text.indexOf(splitter,startIndex);
            int nextLineStartPoint = endIndex + splitter.length();
            String firstPartData = text.substring(0, nextLineStartPoint);
            String secondPartData = text.substring(nextLineStartPoint);

            List<Map<String, String>> listData = testData.get(regex);
            StringBuilder stringBuilder = new StringBuilder();
            for (Map<String,String> tempData:listData) {
                stringBuilder.append(spaceToBeAdded).append("|");
                for (String aList : list) {
                    stringBuilder.append(tempData.get(aList)).append("|");
                }
                stringBuilder.append(splitter);
            }
            String stringToBeAppended = stringBuilder.toString();
            String newScenarioText = firstPartData + stringToBeAppended + secondPartData;
            return newScenarioText;
        }else{
            //logic for normal
        	int endPoint = text.indexOf("Scenario",scenarioRegex.get(1));
            if(endPoint==-1){
                endPoint=text.length();
            }
            String reg = "DataFromExcel";
            String newScenarioText = null;
            int dataModificationInstance = text.indexOf(reg, scenarioRegex.get(0));
            while (dataModificationInstance<endPoint){
                int spacePosition = text.indexOf(" ", dataModificationInstance);
                int exclamationPosition=text.indexOf(splitter,dataModificationInstance);
                String firstPartData;
                String secondPartData;
                String columnName;
                int columnStartPosition;
                if(exclamationPosition>spacePosition){
                    firstPartData=text.substring(0,dataModificationInstance);
                    columnStartPosition = text.lastIndexOf("_", spacePosition);
                    columnName = text.substring(columnStartPosition+1, spacePosition);
                    if(columnName.contains("\"")){
                        int secondPartStartingPosition = text.indexOf("\"", columnStartPosition);
                        columnName=columnName.split("\"")[0];
                        secondPartData=text.substring(secondPartStartingPosition);
                    }else{
                        int secondPartStartingPosition=columnStartPosition+1+columnName.length();
                        secondPartData=text.substring(secondPartStartingPosition);
                    }
                }else{
                    firstPartData=text.substring(0,dataModificationInstance);
                    columnStartPosition = text.lastIndexOf("_", exclamationPosition);
                    columnName = text.substring(columnStartPosition+1, exclamationPosition);
                    if(columnName.contains("\"")){
                        int secondPartStartingPosition = text.indexOf("\"", columnStartPosition);
                        columnName=columnName.split("\"")[0];
                        secondPartData=text.substring(secondPartStartingPosition);
                    }else{
                        int secondPartStartingPosition=columnStartPosition+1+columnName.length();
                        secondPartData=text.substring(secondPartStartingPosition);
                    }
                }

                List<Map<String, String>> data = testData.get(regex);
                if(data.size()==1){
                    Map<String, String> mapData = data.get(0);
                    String stringToBeAppended = mapData.get(columnName);
                    newScenarioText = firstPartData + stringToBeAppended + secondPartData;
                    text=newScenarioText;
                    dataModificationInstance=newScenarioText.indexOf(reg,dataModificationInstance);
                    if(dataModificationInstance==-1){
                        break;
                    }
                }
            }
            return newScenarioText;
        }
    }


    /**
     *
     * @param regex
     * @param text
     * @return
     */

    public List<Integer> searchPattern(String regex, String text){
        List<Integer> list = new ArrayList<Integer>();
        try {
            Pattern pattern = Pattern.compile(regex);
            Matcher matcher = pattern.matcher(text);
            boolean found = false;
            while(matcher.find()){
                /*System.out.println("I found the text "+matcher.group()+" starting at index "+
                        matcher.start()+" and ending at index "+matcher.end());*/
                list.add(matcher.start());
                list.add(matcher.end());
                found=true;
            }

            if(!found){
                logMan.warn("No match found.");
            }
        } catch (Exception e) {
            logMan.error("Error in searchPattern method, for regular expression = "+regex+" , Error = "+e.getMessage());
        }
        return list;
    }

    public List<Integer> searchPatternForScenario(String regex, String text){
        List<Integer> list = new ArrayList<Integer>();
        try {
            Pattern pattern = Pattern.compile(regex);
            Matcher matcher = pattern.matcher(text);
            boolean found = false;
            while(matcher.find()){
               /* System.out.println("I found the text "+matcher.group()+" starting at index "+
                        matcher.start()+" and ending at index "+matcher.end());*/
                list.add(matcher.end());
                found=true;
            }

            if(!found){
                logMan.warn("No match found.");
            }
        } catch (Exception e) {
            logMan.error("Error in searchPatternForScenario method, for regular expression = "+regex+" , Error = "+e.getMessage());
        }
        return list;
    }

    public List<Integer> searchPatternUsingIndex(String regex, String text, int startingFromIndex){
        List<Integer> list = null;
        try {
            list = new ArrayList<Integer>();
            int startPositionOfRegex=text.indexOf(regex,startingFromIndex);
            int endPositionOfRegex=startPositionOfRegex+regex.length();
            list.add(startPositionOfRegex);
            list.add(endPositionOfRegex);
        } catch (Exception e) {
            logMan.error("Error in searchPatternUsingIndex method, Error = "+e.getMessage());
        }
        return list;
    }

}


&&&&&&&&&&&&&&&


package com.boi.grp.utilities;

import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.*;
import java.util.*;

public class PreRunUtility{
	
    public static FileInputStream FIS = null;
    public static Properties Config = null;
    public static Logger logman;

	public static void main(String[] args) {
        System.out.println("PreRunUtility method");
        try {
            System.setProperty("ScenarioName","PreRunLog");
            System.setProperty("ScenarioID","PreRunId");
            logman = LogManagerPreRun.getInstance();
            FIS = new FileInputStream(System.getProperty("user.dir")+"/src/test/java/com/boi/grp/globalconfig/GlobalConfig.properties");
            Config = new Properties();
            Config.load(FIS);
            failSafePropertyGeneration();
        } catch (Throwable e) {
            logman.error("Unable to create PreRun Log , error = "+e.getMessage());
        }

        handleRunConfigurationUsingExcel();
        handleTestDataFromExcelFile();
        invokeWireMockServer();
        removeReportPropertiesData();
	}
	
	
	public static void failSafePropertyGeneration() {
        try {
            for (Object prop : Config.keySet()) {
                if (System.getenv(prop.toString()) != null) {
                    System.setProperty(prop.toString().trim().toUpperCase(), System.getenv(prop.toString()));
                } else {
                    System.setProperty(prop.toString().trim().toUpperCase(), Config.getProperty(prop.toString()));
                }
            }
        } catch (Exception e) {
            logman.error("Error Occurred Inside failSafePropertyGenenration block in PreRun, Error Description="
                    + e.getMessage());
        }
    }

    public static void removeReportPropertiesData(){
        FileOutputStream outputStream = null;
        try {
            Properties prop = new Properties();
            prop.load(new FileReader(System.getProperty("user.dir")+"/src/test/resources/report.properties"));
            prop.clear();
            outputStream = new FileOutputStream(System.getProperty("user.dir") + "/src/test/resources/report.properties");
            prop.store(outputStream,null);
        } catch (IOException e) {
            logman.error("Error in removeReportPropertiesData , Error = "+e.getMessage());
        }finally {
            try {
                outputStream.close();
            } catch (IOException e) {
                logman.error("Error in closing output steam while removing data from properties file, Error =  "+e.getMessage());
            }
        }
    }

    public static void invokeWireMockServer(){
    	
        try {
            if (System.getProperty("TYPE").equalsIgnoreCase("API")) {
                if(System.getProperty("ISMOCKINGENABLED")==null){
                    System.setProperty("ISMOCKINGENABLED","FALSE");
                }
                if(System.getProperty("ISMOCKINGENABLED").equalsIgnoreCase("TRUE")){
                        System.out.println("wiremock process");
                        String path=System.getProperty("user.dir")+"/src/test/resources/wiremock/wiremock-jre8-standalone-2.27.2.jar";
                        int port=Integer.valueOf(System.getProperty("URI").split(":")[2]);
                        try {
                            Runtime.getRuntime().exec("java.exe -jar " + path + " --port=" + port);
                            System.out.println("Wiremock up");
                        } catch (IOException e) {
                            System.out.println("There are some errors during setting up wiremock server, message ="+e.getMessage());
                        }
                    }
            }
        } catch (Exception e) {
            System.out.println("There are some error in invokeWireMockServer, Message =  "+e.getMessage());
        }
    }

    public static void handleRunConfigurationUsingExcel(){
        if (System.getProperty("EXCEL_CONFIGURATION").equalsIgnoreCase("TRUE")) {
            String excelConfigPath;
            excelConfigPath = System.getProperty("EXCEL_CONFIGURATION_FILEPATH");
            if(excelConfigPath==null){
                excelConfigPath="NA";
            }
            getSerializedConfigDataUsingExcel(excelConfigPath);
        }
        //write code to serialize data for platdetails config tab
        String excelConfigPath;
        excelConfigPath = System.getProperty("EXCEL_CONFIGURATION_FILEPATH");
        if(excelConfigPath==null){
            excelConfigPath="NA";
        }
        getSerializedPlatformDetailsData(excelConfigPath);
    }

    public static void handleTestDataFromExcelFile(){
        try {
            String testDataPath;
            testDataPath = System.getProperty("TEST_DATA_FILEPATH");
            if(testDataPath==null){
                testDataPath="NA";
            }
            additionOfDataInFeatureFile(testDataPath);
        } catch (Exception e) {
            System.out.println("Error in handleTestDataFromExcelFile, Error = "+e.getMessage());
        }
    }


    public static void getSerializedConfigDataUsingExcel(String excelConfigPath){
        try {
            FileInputStream fis = new FileInputStream(System.getProperty("user.dir")+"/src/test/resources/RunConfiguration_dependencies/RunConfig.properties");
            Properties properties = new Properties();
            properties.load(fis);

            try {
                for (Object prop : properties.keySet()) {
                    if (System.getenv(prop.toString()) != null) {
                        System.setProperty(prop.toString().trim().toUpperCase(), System.getenv(prop.toString()));
                    } else {
                        System.setProperty(prop.toString().trim().toUpperCase(), properties.getProperty(prop.toString()));
                    }
                }
            } catch (Exception e) {
                logman.error("Error Occurred Inside getSerializedConfigDataForMobileCenterParallelRun, Error Description="
                        + e.getMessage());
            }

            File file = new File(excelConfigPath);
            Xls_Reader xls_reader;
            if(file.exists()){
                if(excelConfigPath.equalsIgnoreCase("resources")){
                   excelConfigPath=System.getProperty("user.dir")+"/src/test/resources/RunConfiguration_dependencies/"+System.getProperty("CONFIGURATION_WORKBOOK");
                   xls_reader=new Xls_Reader(excelConfigPath);
                }else{
                    xls_reader=new Xls_Reader(excelConfigPath);
                }
            }else{
                excelConfigPath=System.getProperty("user.dir")+"/src/test/resources/RunConfiguration_dependencies/"+System.getProperty("CONFIGURATION_WORKBOOK");
                xls_reader=new Xls_Reader(excelConfigPath);
            }
            List<Map<String, String>> runConfigData = xls_reader.getDataInFormOfListOfMapByLinkingTwoSheets(System.getProperty("PLATFORMDETAILSTAB"),System.getProperty("CONFIGURATIONTAB"),System.getProperty("LINKEDCOLUMN"));

            try{
                FileOutputStream fos = new FileOutputStream(System.getProperty("user.dir")+"/target/listData");
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(runConfigData);
                oos.close();
                fos.close();
                System.out.println("Serialisation complete for configuration using excel file");
            }
            catch (IOException ioe){
                logman.error("Error in serialization , Error = "+ioe.getMessage());
            }
        } catch (Exception e) {
            logman.error("Error in getSerializedConfigDataUsingExcel Method, Message = "+e.getMessage());
            System.out.println("Error in getSerializedConfigDataUsingExcel Method, Message = "+e.getMessage());
        }
    }

    public static void additionOfDataInFeatureFile(String testDataPath){

        try {
            FileInputStream fis = new FileInputStream(System.getProperty("user.dir") + "/src/test/resources/testData/TestDataConfig.properties");
            Properties properties = new Properties();
            properties.load(fis);

            try {
                for (Object prop : properties.keySet()) {
                    if (System.getenv(prop.toString()) != null) {
                        System.setProperty(prop.toString().trim().toUpperCase(), System.getenv(prop.toString()));
                    } else {
                        System.setProperty(prop.toString().trim().toUpperCase(), properties.getProperty(prop.toString()));
                    }
                }
            } catch (Exception e) {
                logman.error("Error Occurred Inside getSerializedTestData, Error Description="
                        + e.getMessage());
            }

            Map<String, List<Map<String, String>>> masterData = new HashMap<String, List<Map<String, String>>>();
            Map<String, List<String>> masterColNamePerScenarioTestData = new HashMap<String, List<String>>();
            Map<String, Map<String, String>> masterDataForJsonPayload = new HashMap<String, Map<String, String>>();
            //new test code for multiple excel file
            if(testDataPath.equalsIgnoreCase("resources")){
                testDataPath=System.getProperty("user.dir") + "/src/test/resources/testData";
            }else if(testDataPath.equalsIgnoreCase("NA")||testDataPath.isEmpty()){
                testDataPath=System.getProperty("user.dir") + "/src/test/resources/testData";
            }
            File file1 = new File(testDataPath);
            File[] fileList = file1.listFiles();
            String fileName;
            for (File tempFile : fileList) {
                fileName = tempFile.getAbsolutePath();

                if (tempFile.getName().contains(".xlsx")) {
                    Xls_Reader xls_reader = new Xls_Reader(fileName);

                    Map<String, List<Map<String, String>>> testData = xls_reader.getTestDataInFormOfMap(System.getProperty("TESTDATATAB"), System.getProperty("KEY_COLUMN_NAME1"), System.getProperty("KEY_COLUMN_NAME2"), System.getProperty("EXECUTION_COLUMN"));
                    Map<String, List<String>> colNamePerScenarioTestData = xls_reader.scenarioTestDataColumnName(System.getProperty("TESTDATATAB"), System.getProperty("KEY_COLUMN_NAME1"));

                    if (System.getProperty("TYPE").equalsIgnoreCase("API")) {
                        Map<String, Map<String, String>> dataForJsonPayload = xls_reader.getMappedData(System.getProperty("LINKED_TAB"), System.getProperty("MATCHING_COLUMN"));
                        masterDataForJsonPayload.putAll(dataForJsonPayload);
                    }

                    masterData.putAll(testData);
                    masterColNamePerScenarioTestData.putAll(colNamePerScenarioTestData);
                }
            }
            FeatureUtils featureUtils = new FeatureUtils();
            featureUtils.readAllFeatureFile(System.getProperty("INITIAL_FEATURE_FOLDER"), System.getProperty("FINAL_FEATURE_FOLDER"), masterData, masterColNamePerScenarioTestData);

            if (System.getProperty("TYPE").equalsIgnoreCase("API")) {
                serializationOfMappedDataForJsonPayLoadGeneration(masterDataForJsonPayload);
            }
        } catch (Exception e) {
            logman.error("Error in additionOfDataInFeatureFile Method, Message = "+e.getMessage());
            System.out.println("Error in additionOfDataInFeatureFile Method, Message = "+e.getMessage());
        }

    }


    public static void serializationOfMappedDataForJsonPayLoadGeneration(Map<String, Map<String, String>> dataForJsonPayload){
        try{
            FileOutputStream fos = new FileOutputStream(System.getProperty("user.dir")+"/target/jsonPayLoadData");
            ObjectOutputStream oos = new ObjectOutputStream(fos);
            oos.writeObject(dataForJsonPayload);
            oos.close();
            fos.close();
            System.out.println("Serialisation complete for JsonPayLoad using excel file");
        }
        catch (IOException ioe){
            logman.error("Error in serialization , Error = "+ioe.getMessage());
        }
    }

    public static void getSerializedPlatformDetailsData(String excelConfigPath){
        try {
            FileInputStream fis = new FileInputStream(System.getProperty("user.dir")+"/src/test/resources/RunConfiguration_dependencies/RunConfig.properties");
            Properties properties = new Properties();
            properties.load(fis);

            try {
                for (Object prop : properties.keySet()) {
                    if (System.getenv(prop.toString()) != null) {
                        System.setProperty(prop.toString().trim().toUpperCase(), System.getenv(prop.toString()));
                    } else {
                        System.setProperty(prop.toString().trim().toUpperCase(), properties.getProperty(prop.toString()));
                    }
                }
            } catch (Exception e) {
                logman.error("Error Occurred Inside getSerializedConfigDataForMobileCenterParallelRun, Error Description="
                        + e.getMessage());
            }

            File file = new File(excelConfigPath);
            Xls_Reader xls_reader;
            if(file.exists()){
                if(excelConfigPath.equalsIgnoreCase("resources")){
                    excelConfigPath=System.getProperty("user.dir")+"/src/test/resources/RunConfiguration_dependencies/"+System.getProperty("CONFIGURATION_WORKBOOK");
                    xls_reader=new Xls_Reader(excelConfigPath);
                }else{
                    xls_reader=new Xls_Reader(excelConfigPath);
                }
            }else{
                excelConfigPath=System.getProperty("user.dir")+"/src/test/resources/RunConfiguration_dependencies/"+System.getProperty("CONFIGURATION_WORKBOOK");
                xls_reader=new Xls_Reader(excelConfigPath);
            }
            //List<Map<String, String>> runConfigData = xls_reader.getDataInFormOfListOfMapByLinkingTwoSheets(System.getProperty("PLATFORMDETAILSTAB"),System.getProperty("CONFIGURATIONTAB"),System.getProperty("LINKEDCOLUMN"));
            Map<String, Map<String, String>> platformDetailsData = xls_reader.getDataInFormOfMapofMap(System.getProperty("CONFIGURATIONTAB"), System.getProperty("LINKEDCOLUMN"));

            try{
                FileOutputStream fos = new FileOutputStream(System.getProperty("user.dir")+"/target/platformData");
                ObjectOutputStream oos = new ObjectOutputStream(fos);
                oos.writeObject(platformDetailsData);
                oos.close();
                fos.close();
            }
            catch (IOException ioe){
                logman.error("Error in getSerializedPlatformDetailsData, Error = "+ioe.getMessage());
            }
        } catch (Exception e) {
            logman.error("Error in getSerializedPlatformDetailsData Method, Message = "+e.getMessage());
            System.out.println("Error in getSerializedPlatformDetailsData Method, Message = "+e.getMessage());
        }
    }



}
