package com.boi.grp.driverManager;

import org.apache.log4j.Logger;
import org.openqa.selenium.Platform;
import org.openqa.selenium.UnexpectedAlertBehaviour;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.ie.InternetExplorerOptions;
import org.openqa.selenium.remote.CapabilityType;
import org.openqa.selenium.remote.DesiredCapabilities;

import com.boi.grp.utilities.LogManager;
import com.google.common.collect.ImmutableMap;
import com.microsoft.edge.seleniumtools.EdgeOptions;

public class CapabilityManager {

	public Logger logman = null;

	public CapabilityManager() {
		logman = LogManager.getInstance();
	}

	public ChromeOptions chromeOptions() {
		ChromeOptions options = null;
		try {
			options = new ChromeOptions();
			options.setExperimentalOption("useAutomationExtension", false);
			options.setAcceptInsecureCerts(true);
			logman.info("Chrome Options is set successfully");
		} catch (Exception e) {
			logman.error("Error in chromeOptions, error =  " + e.getMessage());
		}
		return options;
	}

	public InternetExplorerOptions interExplorerOptions() {
		InternetExplorerOptions options = null;
		try {
			options = new InternetExplorerOptions();
			DesiredCapabilities ieCapabilities = new DesiredCapabilities();
			ieCapabilities.setCapability("nativeEvents", false);
			ieCapabilities.setCapability("unexpectedAlertBehaviour", "accept");
			ieCapabilities.setCapability("ignoreProtectedModeSettings", true);
			ieCapabilities.setCapability("disable-popup-blocking", true);
			ieCapabilities.setCapability("enablePersistentHover", true);
			ieCapabilities.setCapability("ignoreZoomSetting", true);
			options.merge(ieCapabilities);
			logman.info("IE Options is set successfully");
		} catch (Exception e) {
			logman.error("Error in InternetOptions, error =  " + e.getMessage());
		}
		return options;
	}

	public ChromeOptions headlessChromeOptions(String size) {
		ChromeOptions chromeOptions = null;
		try {
			chromeOptions = new ChromeOptions();
			chromeOptions.setExperimentalOption("useAutomationExtension", false);
			chromeOptions.setAcceptInsecureCerts(true);
			chromeOptions.addArguments("--disable-extensions");
			chromeOptions.addArguments("--start-maximized");
			chromeOptions.addArguments("--headless");
			chromeOptions.addArguments("--window-size=" + size);
			logman.info("Headless Chrome Options is set successfully");
		} catch (Exception e) {
			logman.error("Error in headlessChromeOptions, error =  " + e.getMessage());
		}
		return chromeOptions;
	}

	public EdgeOptions edgeOptions() {
		EdgeOptions options = null;
		try {
			options = new EdgeOptions();
			// need to add the capability as per the unit testing
			options.setCapability("", "");
			options.setCapability(CapabilityType.ACCEPT_INSECURE_CERTS, true);
			logman.info("Edge Options is set successfully");
		} catch (Exception e) {
			logman.error("Error in EdgeOptions, error =  " + e.getMessage());
		}
		return options;
	}

	public InternetExplorerOptions ieCapabilityForLocalGrid() {
		InternetExplorerOptions ieOption = null;
		try {
			DesiredCapabilities cap1 = new DesiredCapabilities();
			cap1.setBrowserName("internet explorer");
			cap1.setPlatform(Platform.VISTA);
			ieOption = new InternetExplorerOptions();
			ieOption.merge(cap1);
			logman.info("Internet Explorer Options is set successfully for GRID");
		} catch (Exception e) {
			logman.error("Error in ieCapabilityForLocalGrid, error =  " + e.getMessage());
		}
		return ieOption;

	}

	public ChromeOptions chromeCapabilityForLocalGrid() {
		ChromeOptions chromeOption = null;
		try {
			DesiredCapabilities cap = new DesiredCapabilities();
			cap.setBrowserName("chrome");
			cap.setPlatform(Platform.WINDOWS);
			chromeOption = new ChromeOptions();
			chromeOption.merge(cap);
			chromeOption.setHeadless(false);
			logman.info("Chrome Options is set successfully for GRID");
		} catch (Exception e) {
			logman.error("Error in chromeCapabilityForLocalGrid, error =  " + e.getMessage());
		}
		return chromeOption;
	}

	public DesiredCapabilities androidWebDesiredCapabilities(String UDID, String deviceName, String version,
			String browserName, String driverExecutable) {
		DesiredCapabilities desiredCapabilities = null;
		try {
			desiredCapabilities = new DesiredCapabilities();
			desiredCapabilities.setCapability("platformName", "Android");
			desiredCapabilities.setCapability("deviceName", deviceName);
			desiredCapabilities.setCapability("udid", UDID);
			desiredCapabilities.setCapability("platformVersion", version);
			desiredCapabilities.setCapability("automationName", "uiautomator2");
			desiredCapabilities.setCapability("nativeWebScreenshot", true);
			desiredCapabilities.setCapability("browserName", browserName);
			desiredCapabilities.setCapability("chromedriverUseSystemExecutable", false);
			desiredCapabilities.setCapability("newCommandTimeout", 300);
			desiredCapabilities.setCapability("chromedriverExecutable", driverExecutable);
			desiredCapabilities.setCapability("autoAcceptAlerts", true);
			desiredCapabilities.setCapability("locationServicesAuthorized", true);
			logman.info("androidWebDesiredCapabilities is set successfully");
		} catch (Exception e) {
			logman.error("Error in androidWebDesiredCapabilities, error =  " + e.getMessage());
		}
		return desiredCapabilities;
	}

	public DesiredCapabilities iOSWebDesiredCapabilities(String UDID, String deviceName, String browserName,
			String version) {
		DesiredCapabilities desiredCapabilities = null;
		try {
			desiredCapabilities = new DesiredCapabilities();
			desiredCapabilities.setCapability("platformName", "ios");
			desiredCapabilities.setCapability("platformVersion", version);
			desiredCapabilities.setCapability("deviceName", deviceName);
			desiredCapabilities.setCapability("udid", UDID);
			desiredCapabilities.setCapability("browserName", browserName);
			desiredCapabilities.setCapability("newCommandTimeout", 300);
			logman.info("iOSWebDesiredCapabilities is set successfully");
		} catch (Exception e) {
			logman.error("Error in iOSWebDesiredCapabilities, error =  " + e.getMessage());
		}
		return desiredCapabilities;
	}

	public DesiredCapabilities androidAPPDesiredCapabilities(String UDID, String deviceName, String version,
			String appPackageName, String appActivityName) {
		DesiredCapabilities desiredCapabilities = null;
		try {
			desiredCapabilities = new DesiredCapabilities();
			desiredCapabilities.setCapability("udid", UDID);
			desiredCapabilities.setCapability("platformName", "Android");
			desiredCapabilities.setCapability("deviceName", deviceName);
			desiredCapabilities.setCapability("platformVersion", version);
			desiredCapabilities.setCapability("automationName", "uiautomator2");
			desiredCapabilities.setCapability("appPackage", appPackageName);
			desiredCapabilities.setCapability("appActivity", appActivityName);
			desiredCapabilities.setCapability("default", false);
			desiredCapabilities.setCapability("fullReset", false);
			desiredCapabilities.setCapability("noReset", true);
			desiredCapabilities.setCapability("nativeWebScreenshot", true);
			desiredCapabilities.setCapability("autoAcceptAlerts", true);
			desiredCapabilities.setCapability("locationServicesAuthorized", true);
			desiredCapabilities.setCapability("newCommandTimeout", 300);
			logman.info("androidAPPDesiredCapabilities is set successfully");
		} catch (Exception e) {
			logman.error("Error in androidAPPDesiredCapabilities, error =  " + e.getMessage());
		}
		return desiredCapabilities;
	}

	public DesiredCapabilities iOSAppDesiredCapabilities(String UDID, String version, String deviceName,
			String bundleId) {
		DesiredCapabilities desiredCapabilities = null;
		try {
			desiredCapabilities = new DesiredCapabilities();
			desiredCapabilities.setCapability("udid", UDID);
			desiredCapabilities.setCapability("platformName", "ios");
			desiredCapabilities.setCapability("platformVersion", version);
			desiredCapabilities.setCapability("deviceName", deviceName);
			desiredCapabilities.setCapability("bundleId", bundleId);
			desiredCapabilities.setCapability("newCommandTimeout", 120);
			logman.info("iOSAppDesiredCapabilities is set successfully");
		} catch (Exception e) {
			logman.error("Error in iOSAppDesiredCapabilities, error =  " + e.getMessage());
		}
		return desiredCapabilities;
	}

	public DesiredCapabilities mobileCenterAndroidDesiredCapabilities(String mobileCenterUser,
			String mobileCenterPassword, String UDID, String deviceName, String appPackage, String appActivity) {
		DesiredCapabilities desiredCapabilities = null;
		try {
			desiredCapabilities = new DesiredCapabilities();
			desiredCapabilities.setCapability("default", false);
			desiredCapabilities.setCapability("fullReset", false);
			desiredCapabilities.setCapability("noReset", true);
			desiredCapabilities.setCapability("userName", mobileCenterUser);
			desiredCapabilities.setCapability("password", mobileCenterPassword);
			desiredCapabilities.setCapability("udid", UDID);
			desiredCapabilities.setCapability("deviceName", deviceName);
			desiredCapabilities.setCapability("platformName", "Android");
			desiredCapabilities.setCapability("appPackage", appPackage);
			desiredCapabilities.setCapability("appActivity", appActivity);
			desiredCapabilities.setCapability("autoAcceptAlerts", true);
			desiredCapabilities.setCapability("locationServicesAuthorized", true);
			desiredCapabilities.setCapability("autoGrantPermissions", true);
			desiredCapabilities.setCapability("automationName", "uiautomator2");
			desiredCapabilities.setCapability("newCommandTimeout", 120);
			logman.info("mobileCenterAndroidDesiredCapabilities is set successfully");
		} catch (Exception e) {
			logman.error("Error in mobileCenterAndroidDesiredCapabilities, error =  " + e.getMessage());
		}
		return desiredCapabilities;
	}

	public DesiredCapabilities mobileCenteriOSDesiredCapabilities(String mobileCenterUser, String mobileCenterPassword,
			String UDID, String deviceName, String iPhoneBundleID, String platformVersion) {

		DesiredCapabilities desiredCapabilities = null;
		try {
			desiredCapabilities = new DesiredCapabilities();
			desiredCapabilities.setCapability("userName", mobileCenterUser);
			desiredCapabilities.setCapability("password", mobileCenterPassword);
			desiredCapabilities.setCapability("udid", UDID);
			desiredCapabilities.setCapability("deviceName", deviceName);
			desiredCapabilities.setCapability("platformName", "iOS");
			desiredCapabilities.setCapability("newCommandTimeout", 6000);
			desiredCapabilities.setCapability("bundleId", iPhoneBundleID);
			desiredCapabilities.setCapability("automationName", "XCUITest");
			desiredCapabilities.setCapability(CapabilityType.UNEXPECTED_ALERT_BEHAVIOUR,
					UnexpectedAlertBehaviour.ACCEPT);
			desiredCapabilities.setCapability("autoAcceptAlerts", true);

			desiredCapabilities.setCapability("platformVersion", platformVersion);
			desiredCapabilities.setCapability("simpleIsVisibleCheck", true);
			desiredCapabilities.setCapability("default", false);
			desiredCapabilities.setCapability("fullReset", false);
			desiredCapabilities.setCapability("noReset", true);
			desiredCapabilities.setCapability("nativeWebScreenshot", true);
			desiredCapabilities.setCapability("ignoreUnimportantViews", true);
			logman.info("mobileCenteriOSDesiredCapabilities is set successfully");
			logman.debug("Username = " + mobileCenterUser);
			logman.debug("UDID = " + UDID);
		} catch (Exception e) {
			logman.error("Error in mobileCenteriOSDesiredCapabilities, error =  " + e.getMessage());
		}
		return desiredCapabilities;
	}

	public DesiredCapabilities mobileCenterWebAndroid(String mobileCenterUser, String mobileCenterPassword, String UDID,
			String deviceName, String browserName) {
		DesiredCapabilities desiredCapabilities = null;
		try {
			desiredCapabilities = new DesiredCapabilities();
			desiredCapabilities.setCapability("userName", mobileCenterUser);
			desiredCapabilities.setCapability("password", mobileCenterPassword);
			desiredCapabilities.setCapability("udid", UDID);
			desiredCapabilities.setCapability("deviceName", deviceName);
			desiredCapabilities.setCapability("platformName", "Android");
			desiredCapabilities.setCapability("automationName", "uiautomator2");
			desiredCapabilities.setCapability("appium:chromeOptions", ImmutableMap.of("w3c", false));
			desiredCapabilities.setCapability("browserName", browserName);
			desiredCapabilities.setCapability("autoGrantPermissions", true);
			desiredCapabilities.setCapability("autoAcceptAlerts", true);
			desiredCapabilities.setCapability("newCommandTimeout", 300);
			logman.info("mobileCenterWebAndroid is set successfully");
		} catch (Exception e) {
			logman.error("Error in mobileCenterWebAndroid, error =  " + e.getMessage());
		}
		return desiredCapabilities;
	}

	public DesiredCapabilities mobileCenterWebiOS(String mobileCenterUser, String mobileCenterPassword, String UDID,
			String deviceName, String browserName) {
		DesiredCapabilities desiredCapabilities = null;
		try {
			desiredCapabilities = new DesiredCapabilities();
			desiredCapabilities.setCapability("userName", mobileCenterUser);
			desiredCapabilities.setCapability("password", mobileCenterPassword);
			desiredCapabilities.setCapability("udid", UDID);
			desiredCapabilities.setCapability("deviceName", deviceName);
			desiredCapabilities.setCapability("platformName", "ios");
			desiredCapabilities.setCapability("automationName", "XCUITest");
			// desiredCapabilities.setCapability("automationName","iOS");
			desiredCapabilities.setCapability("browserName", browserName);
			desiredCapabilities.setCapability("newCommandTimeout", 300);
			logman.info("mobileCenterWebiOS is set successfully");
		} catch (Exception e) {
			logman.error("Error in mobileCenterWebiOS, error =  " + e.getMessage());
		}
		return desiredCapabilities;
	}

	public DesiredCapabilities browserStackMCBrowser(String mobileCenterUser, String mobileCenterPassword, String UDID,
			String deviceName, String browserName) {
		DesiredCapabilities desiredCapabilities = null;
		try {
			desiredCapabilities = new DesiredCapabilities();
			desiredCapabilities.setCapability("userName", mobileCenterUser);
			desiredCapabilities.setCapability("password", mobileCenterPassword);
			desiredCapabilities.setCapability("udid", UDID);
			desiredCapabilities.setCapability("deviceName", deviceName);
			desiredCapabilities.setCapability("platformName", "Android");
			desiredCapabilities.setCapability("browserName", browserName);
			desiredCapabilities.setCapability("newCommandTimeout", 300);
			logman.info("mobileCenterWebAndroid is set successfully");
		} catch (Exception e) {
			logman.error("Error in mobileCenterWebAndroid, error =  " + e.getMessage());
		}
		return desiredCapabilities;
	}

	public DesiredCapabilities browserStackBrowser(String userName, String passKey, String browserName,
			String browserVersion, String osName, String osVersion, String resolution, Boolean local, String project,
			String build, String name) {
		DesiredCapabilities desiredCapabilities = null;
		try {
			desiredCapabilities = new DesiredCapabilities();
			desiredCapabilities.setCapability("browserstack.user", userName);
			desiredCapabilities.setCapability("browserstack.key", passKey);
			desiredCapabilities.setCapability("browser", browserName);
			desiredCapabilities.setCapability("browser_version", browserVersion);
			desiredCapabilities.setCapability("os", osName);
			desiredCapabilities.setCapability("os_version", osVersion);
//            desiredCapabilities.setCapability("resolution", resolution);
//            desiredCapabilities.setCapability("local", local);
			desiredCapabilities.setCapability("project", project);
			desiredCapabilities.setCapability("build", build);
			desiredCapabilities.setCapability("name", name);
			desiredCapabilities.setCapability("acceptSslCerts", true);
			logman.info("browserStackBrowser capabilities is set successfully");
		} catch (Exception e) {
			logman.error("Error in browserStackBrowser, error =  " + e.getCause());
		}
		return desiredCapabilities;
	}

	public DesiredCapabilities browserStackMobileApp(String userName, String passKey, String deviceName,
			String osVersion, String app, String resolution, Boolean local, String project, String build, String name) {
		DesiredCapabilities desiredCapabilities = null;
		try {
			desiredCapabilities = new DesiredCapabilities();
			desiredCapabilities.setCapability("browserstack.user", userName);
			desiredCapabilities.setCapability("browserstack.key", passKey);
			desiredCapabilities.setCapability("device", deviceName);
			desiredCapabilities.setCapability("os_version", osVersion);
			desiredCapabilities.setCapability("app", app);
//            desiredCapabilities.setCapability("resolution", resolution);
//            desiredCapabilities.setCapability("local", local);
//            desiredCapabilities.setCapability("browserstack.resignApp", "false");
			desiredCapabilities.setCapability("browserstack.debug", true);
			desiredCapabilities.setCapability("project", project);
			desiredCapabilities.setCapability("build", build);
			desiredCapabilities.setCapability("name", name);
			desiredCapabilities.setCapability("nativeWebScreenshot", true);
			desiredCapabilities.setCapability("autoAcceptAlerts", true);
			desiredCapabilities.setCapability("locationServicesAuthorized", true);
			desiredCapabilities.setCapability("newCommandTimeout", 300);
			desiredCapabilities.setCapability("autoGrantPermissions", true);
			desiredCapabilities.setCapability("browserstack.resignApp", true);
			logman.info("browserStackMobileApp capabilities is set successfully");
		} catch (Exception e) {
			logman.error("Error in browserStackBrowser, error =  " + e.getCause());
		}
		return desiredCapabilities;
	}

	public DesiredCapabilities browserStackMobilBrowser(String userName, String passKey, String deviceName,
			String osVersion, String browserName, String resolution, Boolean local, String project, String build,
			String name) {
		DesiredCapabilities desiredCapabilities = null;
		try {
			desiredCapabilities = new DesiredCapabilities();
			desiredCapabilities.setCapability("browserstack.user", userName);
			desiredCapabilities.setCapability("browserstack.key", passKey);
			desiredCapabilities.setCapability("device", deviceName);
			desiredCapabilities.setCapability("os_version", osVersion);
			desiredCapabilities.setCapability("browserName", browserName);
//            desiredCapabilities.setCapability("browser",browserName);
			desiredCapabilities.setCapability("realMobile", true);
//            desiredCapabilities.setCapability("resolution", resolution);
//            desiredCapabilities.setCapability("local", local);
			desiredCapabilities.setCapability("project", project);
			desiredCapabilities.setCapability("build", build);
			desiredCapabilities.setCapability("name", name);
			desiredCapabilities.setCapability("nativeWebScreenshot", true);
			desiredCapabilities.setCapability("autoAcceptAlerts", true);
			desiredCapabilities.setCapability("locationServicesAuthorized", true);
			//desiredCapabilities.setCapability("newCommandTimeout", 300);
			desiredCapabilities.setCapability("acceptSslCert", true);
			logman.info("browserStackBrowser capabilities is set successfully");
		} catch (Exception e) {
			logman.error("Error in browserStackBrowser, error =  " + e.getCause());
		}
		return desiredCapabilities;
	}

	public EdgeOptions headlessEdgeOptions() {
		EdgeOptions options = null;
		try {
			options = new EdgeOptions();
			options.setCapability("UseChromium", true);
			options.addArguments("--headless");
			options.addArguments("--disable-gpu");
			options.addArguments("--disable-extensions");
			options.addArguments("--start-maximized");
			options.setExperimentalOption("useAutomationExtension", false);
			logman.info("Headless Edge Options is set successfully");
		} catch (Exception e) {
			logman.error("Error in headlessEdgeOptions, error = " + e.getMessage());
		}
		return options;
	}

}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&testeeee&&&&&&&&&&&&&&&&&&&&&&&&&
package com.boi.grp.driverManager;

import java.net.MalformedURLException;
import java.net.URL;

import org.apache.log4j.Logger;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.remote.DesiredCapabilities;
import org.openqa.selenium.remote.RemoteWebDriver;

import com.boi.grp.utilities.LogManager;
import com.microsoft.edge.seleniumtools.EdgeDriver;

import io.appium.java_client.AppiumDriver;
import io.appium.java_client.android.AndroidDriver;
import io.appium.java_client.ios.IOSDriver;

/**
 * Created by C112083 on 22/10/2020.
 */
public class DriverManager {

	public Logger logman = null;

	public DriverManager() {
		logman = LogManager.getInstance();
	}

	public WebDriver GetDriver(String Platform, String Type) {
		WebDriver driver = null;
		try {
			switch (Platform.trim().toUpperCase()) {
			case "WINDOWS":
				switch (Type.trim().toUpperCase()) {
				case "BROWSER":
					driver = GetDriverForBrowsers(System.getProperty("PREFERRED_BROWSER"));
					break;
				case "APPLICATION":
					driver = GetDriverForDevices(System.getProperty("DEVICEPLATFORM"));
					break;
				case "MOBILEBROWSER":
					driver = GetDriverForDeviceBrowser(System.getProperty("DEVICEPLATFORM"),
							System.getProperty("PREFERRED_BROWSER"));
					break;
				case "API":
					// GetMockApiUpAndRunning();
					break;
				case "DATABASE":
					break;

				}
				break;

			case "GRID":
				switch (Type.trim().toUpperCase()) {
				case "BROWSER":
					driver = GetDriverForGRID(System.getProperty("PREFERRED_BROWSER"));
					break;
				}
				break;

			case "MOBILECENTER":
				switch (Type.trim().toUpperCase()) {
				case "BROWSER":
					driver = GetDriverForMobileCenterDeviceBrowsers(System.getProperty("DEVICEPLATFORM"),
							System.getProperty("PREFERRED_BROWSER"));
					break;
				case "APPLICATION":
					driver = GetDriverForMobileCenterDeviceApp(System.getProperty("DEVICEPLATFORM"));
					break;
				}
				break;
			case "BROWSERSTACK":

				setSystemProxyForBrowserStack(System.getProperty("PROXYHOST"), System.getProperty("PROXYPORT"),
						System.getProperty("BROWSERSTACKHOSTUSER"), System.getProperty("BROWSERSTACKPASSWORD"));

				switch (Type.trim().toUpperCase()) {
				case "BROWSER":
					driver = GetDriverForBrowserStackBrowsers();
					break;
				case "APPLICATION":
					driver = GetDriverForBrowserStackDeviceApp(System.getProperty("DEVICEPLATFORM"));
					break;
				case "MOBILEBROWSER":
					driver = GetDriverForBrowserStackDeviceBrowser(System.getProperty("DEVICEPLATFORM"));
					break;
				}
				break;
			case "LINUX":
				break;
			case "MAC":
				break;
			default:
				break;
			}
			if (System.getProperty("TYPE").equalsIgnoreCase("API")
					|| System.getProperty("TYPE").equalsIgnoreCase("DATABASE")) {
				logman.info("Test Type is , =  " + System.getProperty("TYPE"));
			} else {
				if (driver != null) {
					logman.info("Driver object is created successfully");
				} else {
					logman.error(
							"Error Occurred Inside GetDriver method in DriverManager, The webdriver is null in GetDriver function, Please consult the automation team");
				}
			}

		} catch (Exception e) {
			logman.error(
					"Error Occurred Inside GetDriver method in DriverManager, Error Description=" + e.getMessage());
		}
		return driver;
	}

	public WebDriver GetDriverForBrowsers(String Browser) {
		WebDriver driver = null;
		CapabilityManager capabilityManager = new CapabilityManager();
		try {
			switch (Browser.trim().toUpperCase()) {
			case "IE":
				System.setProperty("webdriver.ie.driver", System.getProperty("user.dir")
						+ "/src/test/resources/webdrivers/windows/internetExplorer/IEDriverServer.exe");
				driver = new InternetExplorerDriver(capabilityManager.interExplorerOptions());
				logman.info("driver object of IE for GetDriverForBrowsers is instantiated");
				break;
			case "EDGE":

				System.setProperty("webdriver.edge.driver", System.getProperty("user.dir")
						+ "/src/test/resources/webdrivers/windows/edge/msedgedriver.exe");
				driver = new EdgeDriver(capabilityManager.edgeOptions());
				logman.info("driver object of EDGE for GetDriverForBrowsers is instantiated");
				break;
			case "CHROME":
				System.setProperty("webdriver.chrome.driver",
						System.getProperty("user.dir") + "/src/test/resources/webdrivers/windows/chrome/"
								+ System.getProperty("CHROME_VERSION") + "/chromedriver.exe");
				driver = new ChromeDriver(capabilityManager.chromeOptions());
				logman.info("driver object of CHROME for GetDriverForBrowsers is instantiated");
				break;
			case "HEADLESSCHROME":
				System.setProperty("webdriver.chrome.driver",
						System.getProperty("user.dir") + "/src/test/resources/webdrivers/windows/chrome/"
								+ System.getProperty("CHROME_VERSION") + "/chromedriver.exe");
				driver = new ChromeDriver(capabilityManager.headlessChromeOptions(System.getProperty("WINDOWSIZE")));
				logman.info("driver object of HEADLESSCHROME for GetDriverForBrowsers is instantiated");
				break;
			case "HEADLESSEDGE":
				System.setProperty("webdriver.edge.driver", System.getProperty("user.dir")
						+ "/src/test/resources/webdrivers/windows/edge/msedgedriver.exe");
				driver = new EdgeDriver(capabilityManager.headlessEdgeOptions());
				logman.info("driver object of HEADLESSEDGE for GetDriverForBrowsers is instantiated");
				break;
			}
			System.setProperty("URL", System.getProperty("DESKTOP_URL"));
			System.setProperty("DEVICETYPE", "WEB");
		} catch (Exception e) {
			logman.error("Error Occurred Inside GetDriverForBrowsers method, Error Description=" + e.getMessage());
		}
		return driver;
	}

	public WebDriver GetDriverForDevices(String DevicePlatform) {
		AppiumDriver driver = null;
		CapabilityManager capabilityManager = new CapabilityManager();
		try {
			switch (DevicePlatform.trim().toUpperCase()) {
			case "ANDROID":
				driver = new AndroidDriver(new URL("APPIUMURL"),
						capabilityManager.androidAPPDesiredCapabilities(System.getProperty("UDID"),
								System.getProperty("DEVICENAME"), System.getProperty("VERSION"),
								System.getProperty("APPPACKAGENAME"), System.getProperty("APPACTIVITYNAME")));
				logman.info("driver object of ANDROID for GetDriverForDevices is instantiated");
				break;
			case "IOS":
				driver = new IOSDriver(new URL("APPIUMURL"),
						capabilityManager.iOSAppDesiredCapabilities(System.getProperty("UDID"),
								System.getProperty("VERSION"), System.getProperty("DEVICENAME"),
								System.getProperty("IOSBUNDLEID")));
				logman.info("driver object of IOS for GetDriverForDevices is instantiated");
				break;
			}
			System.setProperty("DEVICETYPE", "APP");
		} catch (Exception e) {
			logman.error("Error Occurred Inside GetDriverForDevices method, Error Description=" + e.getMessage());
		}
		return driver;
	}

	public AppiumDriver GetDriverForDeviceBrowser(String DevicePlatform, String Browser) {
		CapabilityManager capabilityManager = new CapabilityManager();
		AppiumDriver driver = null;
		try {
			switch (DevicePlatform.trim().toUpperCase()) {
			case "ANDROID":
				switch (Browser.trim().toUpperCase()) {
				case "CHROME":
					try {
						driver = new AndroidDriver(new URL("APPIUMURL"),
								capabilityManager.androidWebDesiredCapabilities(System.getProperty("UDID"),
										System.getProperty("DEVICENAME"), System.getProperty("VERSION"),
										System.getProperty("PREFERRED_BROWSER"),
										System.getProperty("DRIVEREXECUTABLEPATH")));
						logman.info("Connection Established between local mobile and ANDROID Mobile Browser "
								+ System.getProperty("PREFERRED_BROWSER"));
					} catch (MalformedURLException e) {
						logman.error(
								"Error Occurred Inside GetDriverForDeviceBrowser method and ANDROID block, Error Description="
										+ e.getMessage());
					}
					break;
				default:
					break;
				}
				break;
			case "IOS":
				switch (Browser.trim().toUpperCase()) {
				case "CHROME":
					try {
						driver = new IOSDriver(new URL("APPIUMURL"),
								capabilityManager.iOSWebDesiredCapabilities(System.getProperty("UDID"),
										System.getProperty("DEVICENAME"), System.getProperty("PREFERRED_BROWSER"),
										System.getProperty("VERSION")));
						logman.info("Connection Established between local mobile and IOS Mobile Browser "
								+ System.getProperty("PREFERRED_BROWSER"));
					} catch (MalformedURLException e) {
						logman.error(
								"Error Occurred Inside GetDriverForDeviceBrowser method and IOS CHROME block, Error Description="
										+ e.getMessage());
					}
					break;
				case "SAFARI":
					try {
						driver = new IOSDriver(new URL("APPIUMURL"),
								capabilityManager.iOSWebDesiredCapabilities(System.getProperty("UDID"),
										System.getProperty("DEVICENAME"), System.getProperty("PREFERRED_BROWSER"),
										System.getProperty("VERSION")));
						logman.info("Connection Established between Mobile Center Connector and IOS Mobile Browser "
								+ System.getProperty("PREFERRED_BROWSER"));
					} catch (MalformedURLException e) {
						logman.error(
								"Error Occurred Inside GetDriverForMobileCenterDeviceBrowsers method and IOS SAFARI block, Error Description="
										+ e.getMessage());
					}
					break;
				default:
					break;
				}
				break;

			default:
				break;
			}
			System.setProperty("URL", System.getProperty("MOBILE_URL"));
			System.setProperty("DEVICETYPE", "MOBILEWEB");
		} catch (Exception e) {
			logman.error("Error Occurred Inside GetDriverForMobileCenterDeviceBrowsers method, Error Description="
					+ e.getMessage());
		}
		return driver;

	}

	public RemoteWebDriver GetDriverForGRID(String Browser) {
		RemoteWebDriver driver = null;
		CapabilityManager capabilityManager = new CapabilityManager();
		try {
			switch (Browser.trim().toUpperCase()) {
			case "IE":
				driver = new RemoteWebDriver(new URL(System.getProperty("HUBURL")),
						capabilityManager.ieCapabilityForLocalGrid());
				logman.info("driver object of GRID for IE browser is instantiated");
				break;
			case "CHROME":
				driver = new RemoteWebDriver(new URL(System.getProperty("HUBURL")),
						capabilityManager.chromeCapabilityForLocalGrid());
				logman.info("driver object of GRID for chrome browser is instantiated");
				break;
			}
			System.setProperty("URL", System.getProperty("DESKTOP_URL"));
			System.setProperty("DEVICETYPE", "WEB");
		} catch (Exception e) {
			logman.error("Error Occurred Inside GetDriverForGRID method, Error Description=" + e.getMessage());
		}
		return driver;
	}

	public AppiumDriver GetDriverForMobileCenterDeviceApp(String devicePlatform) {
		CapabilityManager capabilityManager = new CapabilityManager();
		AppiumDriver driver = null;
		try {
			switch (devicePlatform.trim().toUpperCase()) {
			case "ANDROID":
				try {
					DesiredCapabilities desiredCapabilities = capabilityManager.mobileCenterAndroidDesiredCapabilities(
							System.getProperty("MOBILECENTERUSER"), System.getProperty("MOBILECENTERPASSWORD"),
							System.getProperty("UDID"), System.getProperty("DEVICENAME"),
							System.getProperty("APPPACKAGENAME"), System.getProperty("APPACTIVITYNAME"));
					driver = new AndroidDriver(new URL(System.getProperty("MOBILECENTERHOST")), desiredCapabilities);
					logman.info("Connection Established between Mobile Center Connector and ANDROID Mobile Device");
				} catch (MalformedURLException e) {
					logman.error(
							"Error Occurred Inside GetDriverForMobileCenterDeviceApp method and ANDROID block, Error Description="
									+ e.getMessage());
				}
				break;
			case "IOS":
				try {
					DesiredCapabilities desiredCapabilities = capabilityManager.mobileCenteriOSDesiredCapabilities(
							System.getProperty("MOBILECENTERUSER"), System.getProperty("MOBILECENTERPASSWORD"),
							System.getProperty("UDID"), System.getProperty("DEVICENAME"),
							System.getProperty("IOSBUNDLEID"), System.getProperty("VERSION"));
					driver = new IOSDriver(new URL(System.getProperty("MOBILECENTERHOST")), desiredCapabilities);
					logman.info("Connection Established between Mobile Center Connector and IOS Mobile Device");
				} catch (Exception e) {
					logman.error(
							"Error Occurred Inside GetDriverForMobileCenterDeviceApp method and IOS block, Error Description="
									+ e.getMessage());
				}
				break;
			default:
				break;
			}
			System.setProperty("DEVICETYPE", "APP");
		} catch (Exception e) {
			logman.error("Error Occurred Inside GetDriverForMobileCenterDeviceApp method, Error Description="
					+ e.getMessage());
		}
		return driver;
	}

	public AppiumDriver GetDriverForMobileCenterDeviceBrowsers(String devicePlatform, String browserType) {
		CapabilityManager obj = new CapabilityManager();
		AppiumDriver driver = null;
		try {
			switch (devicePlatform.trim().toUpperCase()) {
			case "ANDROID":
				switch (browserType.trim().toUpperCase()) {
				case "CHROME":
					try {
						DesiredCapabilities desiredCapabilities = obj.mobileCenterWebAndroid(
								System.getProperty("MOBILECENTERUSER"), System.getProperty("MOBILECENTERPASSWORD"),
								System.getProperty("UDID"), System.getProperty("DEVICENAME"),
								System.getProperty("PREFERRED_BROWSER"));
						driver = new AndroidDriver(new URL(System.getProperty("MOBILECENTERHOST")),
								desiredCapabilities);
						logman.info("Connection Established between Mobile Center Connector and ANDROID Mobile Browser "
								+ System.getProperty("PREFERRED_BROWSER"));
					} catch (MalformedURLException e) {
						logman.error(
								"Error Occurred Inside GetDriverForMobileCenterDeviceBrowsers method and ANDROID block, Error Description="
										+ e.getMessage());
					}
					break;
				default:
					break;
				}
				break;
			case "IOS":
				switch (browserType.trim().toUpperCase()) {
				case "CHROME":
					try {
						DesiredCapabilities desiredCapabilities = obj.mobileCenterWebiOS(
								System.getProperty("MOBILECENTERUSER"), System.getProperty("MOBILECENTERPASSWORD"),
								System.getProperty("UDID"), System.getProperty("DEVICENAME"),
								System.getProperty("PREFERRED_BROWSER"));
						driver = new IOSDriver(new URL(System.getProperty("MOBILECENTERHOST")), desiredCapabilities);
						logman.info("Connection Established between Mobile Center Connector and IOS Mobile Browser "
								+ System.getProperty("PREFERRED_BROWSER"));
					} catch (MalformedURLException e) {
						logman.error(
								"Error Occurred Inside GetDriverForMobileCenterDeviceBrowsers method and IOS CHROME block, Error Description="
										+ e.getMessage());
					}
					break;
				case "SAFARI":
					try {
						DesiredCapabilities desiredCapabilities = obj.mobileCenterWebiOS(
								System.getProperty("MOBILECENTERUSER"), System.getProperty("MOBILECENTERPASSWORD"),
								System.getProperty("UDID"), System.getProperty("DEVICENAME"),
								System.getProperty("PREFERRED_BROWSER"));
						driver = new IOSDriver(new URL(System.getProperty("MOBILECENTERHOST")), desiredCapabilities);
						logman.info("Connection Established between Mobile Center Connector and IOS Mobile Browser "
								+ System.getProperty("PREFERRED_BROWSER"));
					} catch (MalformedURLException e) {
						logman.error(
								"Error Occurred Inside GetDriverForMobileCenterDeviceBrowsers method and IOS SAFARI block, Error Description="
										+ e.getMessage());
					}
					break;
				default:
					break;
				}
				break;

			default:
				break;
			}
			System.setProperty("URL", System.getProperty("MOBILE_URL"));
			System.setProperty("DEVICETYPE", "MOBILEWEB");
		} catch (Exception e) {
			logman.error("Error Occurred Inside GetDriverForMobileCenterDeviceBrowsers method, Error Description="
					+ e.getMessage());
		}
		return driver;
	}

	public WebDriver GetDriverForBrowserMCStackBrowsers(String browserType) {
		CapabilityManager obj = new CapabilityManager();
		WebDriver driver = null;
		try {
			switch (browserType.trim().toUpperCase()) {
			case "CHROME":
				try {
					DesiredCapabilities desiredCapabilities = obj.browserStackMCBrowser(
							System.getProperty("MOBILECENTERUSER"), System.getProperty("MOBILECENTERPASSWORD"),
							System.getProperty("UDID"), System.getProperty("DEVICENAME"),
							System.getProperty("PREFERRED_BROWSER"));
					driver = new RemoteWebDriver(new URL(System.getProperty("BrowserStackHost")), desiredCapabilities);
					logman.info("Connection Established between Mobile Center Connector and ANDROID Mobile Browser "
							+ System.getProperty("PREFERRED_BROWSER"));
				} catch (MalformedURLException e) {
					logman.error(
							"Error Occurred Inside GetDriverForMobileCenterDeviceBrowsers method and ANDROID block, Error Description="
									+ e.getMessage());
				}
				break;
			default:
				break;
			}
			System.setProperty("URL", System.getProperty("DESKTOP_URL"));
			System.setProperty("DEVICETYPE", "WEB");
		} catch (Exception e) {
			logman.error("Error Occurred Inside GetDriverForMobileCenterDeviceBrowsers method, Error Description="
					+ e.getMessage());
		}
		return driver;
	}

	public WebDriver GetDriverForBrowserStackBrowsers() {
		CapabilityManager obj = new CapabilityManager();
		WebDriver driver = null;

		try {
			DesiredCapabilities desiredCapabilities = obj.browserStackBrowser(
					System.getProperty("BROWSERSTACKHOSTUSER"), System.getProperty("BROWSERSTACKPASSWORD"),
					System.getProperty("PREFERRED_BROWSER"), System.getProperty("VERSION"),
					System.getProperty("BROWSERSTACKOS"), System.getProperty("BROWSERSTACKOSVERSION"),
					System.getProperty("RESOLUTION"), Boolean.parseBoolean(System.getProperty("LOCAL")),
					System.getProperty("PROJECTNAME"), System.getProperty("BUILD"),
					System.getProperty("ScenarioName") + "_" + System.getProperty("ScenarioID"));

			driver = new RemoteWebDriver(new URL(System.getProperty("BROWSERSTACKHOST")), desiredCapabilities);
			logman.info("Connection Established with BrowserStack host " + System.getProperty("BROWSERSTACKHOST")
					+ " on Browser " + System.getProperty("PREFERRED_BROWSER"));
		} catch (Exception e) {
			e.printStackTrace();
			logman.error(
					"Error Occurred Inside GetDriverForBrowserStackBrowsers method, Error Description=" + e.getCause());
		}
		System.setProperty("URL", System.getProperty("DESKTOP_URL"));
		System.setProperty("DEVICETYPE", "WEB");
		return driver;
	}

	public AppiumDriver GetDriverForBrowserStackDeviceApp(String devicePlatform) {
		CapabilityManager obj = new CapabilityManager();
		AppiumDriver driver = null;

		try {
			switch (devicePlatform.trim().toUpperCase()) {
			case "ANDROID":
				try {
					DesiredCapabilities desiredCapabilities = obj.browserStackMobileApp(
							System.getProperty("BROWSERSTACKHOSTUSER"), System.getProperty("BROWSERSTACKPASSWORD"),
							System.getProperty("DEVICENAME"), System.getProperty("DEVICEOSVERSION"),
							System.getProperty("APP"), System.getProperty("RESOLUTION"),
							Boolean.parseBoolean(System.getProperty("LOCAL")), System.getProperty("PROJECTNAME"),
							System.getProperty("BUILD"),
							System.getProperty("ScenarioName") + "_" + System.getProperty("ScenarioID"));

					driver = new AndroidDriver(new URL(System.getProperty("BROWSERSTACKHOST")), desiredCapabilities);
					logman.info(
							"Connection Established with BrowserStack host " + System.getProperty("BROWSERSTACKHOST")
									+ " on Device " + System.getProperty("DEVICENAME"));
				} catch (Exception e) {
					e.printStackTrace();
					logman.error("Error Occurred Inside GetDriverForBrowserStackDeviceApp method, Error Description="
							+ e.getCause());
				}

				break;
			case "IOS":
				try {
					DesiredCapabilities desiredCapabilities = obj.browserStackMobileApp(
							System.getProperty("BROWSERSTACKHOSTUSER"), System.getProperty("BROWSERSTACKPASSWORD"),
							System.getProperty("DEVICENAME"), System.getProperty("DEVICEOSVERSION"),
							System.getProperty("APP"), System.getProperty("RESOLUTION"),
							Boolean.parseBoolean(System.getProperty("LOCAL")), System.getProperty("PROJECTNAME"),
							System.getProperty("BUILD"),
							System.getProperty("ScenarioName") + "_" + System.getProperty("ScenarioID"));

					driver = new IOSDriver(new URL(System.getProperty("BROWSERSTACKHOST")), desiredCapabilities);
					logman.info(
							"Connection Established with BrowserStack host " + System.getProperty("BROWSERSTACKHOST")
									+ " on Device " + System.getProperty("DEVICENAME"));
				} catch (Exception e) {
					e.printStackTrace();
					logman.error("Error Occurred Inside GetDriverForBrowserStackDeviceApp method, Error Description="
							+ e.getCause());
				}
				break;
			default:
				break;
			}
			System.setProperty("DEVICETYPE", "APP");
		} catch (Exception e) {
			e.printStackTrace();
			logman.error("Error Occurred Inside GetDriverForBrowserStackDeviceApp method, Error Description="
					+ e.getCause());
		}

		return driver;
	}

	public WebDriver GetDriverForBrowserStackDeviceBrowser(String devicePlatform) {
		CapabilityManager obj = new CapabilityManager();
		AppiumDriver driver = null;

		try {
			switch (devicePlatform.trim().toUpperCase()) {
			case "ANDROID":
				try {
					DesiredCapabilities desiredCapabilities = obj.browserStackMobilBrowser(
							System.getProperty("BROWSERSTACKHOSTUSER"), System.getProperty("BROWSERSTACKPASSWORD"),
							System.getProperty("DEVICENAME"), System.getProperty("DEVICEOSVERSION"),
							System.getProperty("PREFERRED_BROWSER"), System.getProperty("RESOLUTION"),
							Boolean.parseBoolean(System.getProperty("LOCAL")), System.getProperty("PROJECTNAME"),
							System.getProperty("BUILD"),
							System.getProperty("ScenarioName") + "_" + System.getProperty("ScenarioID"));

					driver = new AndroidDriver(new URL(System.getProperty("BROWSERSTACKHOST")), desiredCapabilities);
					logman.info(
							"Connection Established with BrowserStack host " + System.getProperty("BROWSERSTACKHOST")
									+ " on Device " + System.getProperty("DEVICENAME"));
				} catch (Exception e) {
					e.printStackTrace();
					logman.error("Error Occurred Inside GetDriverForBrowserStackDeviceApp method, Error Description="
							+ e.getCause());
				}

				break;
			case "IOS":
				try {
					DesiredCapabilities desiredCapabilities = obj.browserStackMobilBrowser(
							System.getProperty("BROWSERSTACKHOSTUSER"), System.getProperty("BROWSERSTACKPASSWORD"),
							System.getProperty("DEVICENAME"), System.getProperty("DEVICEOSVERSION"),
							System.getProperty("PREFERRED_BROWSER"), System.getProperty("RESOLUTION"),
							Boolean.parseBoolean(System.getProperty("LOCAL")), System.getProperty("PROJECTNAME"),
							System.getProperty("BUILD"),
							System.getProperty("ScenarioName") + "_" + System.getProperty("ScenarioID"));

					driver = new IOSDriver(new URL(System.getProperty("BROWSERSTACKHOST")), desiredCapabilities);
					logman.info(
							"Connection Established with BrowserStack host " + System.getProperty("BROWSERSTACKHOST")
									+ " on Device " + System.getProperty("DEVICENAME"));
				} catch (Exception e) {
					e.printStackTrace();
					logman.error("Error Occurred Inside GetDriverForBrowserStackDeviceApp method, Error Description="
							+ e.getCause());
				}
				break;
			default:
				break;
			}
			System.setProperty("URL", System.getProperty("MOBILE_URL"));
			System.setProperty("DEVICETYPE", "MOBILEWEB");
		} catch (Exception e) {
			e.printStackTrace();
			logman.error("Error Occurred Inside GetDriverForBrowserStackDeviceApp method, Error Description="
					+ e.getCause());
		}

		return driver;
	}

	public void setSystemProxyForBrowserStack(String proxyHost, String proxyPort, String proxyUser, String proxyPass) {
		System.setProperty("http.proxyHost", proxyHost);
		System.setProperty("http.proxyPort", proxyPort);
		System.setProperty("http.proxyUser", proxyUser);
		System.setProperty("http.proxyPass", proxyPass);
	}

}
&&&&&&&&&&&&&&&&&&&&&&&&&&testeeeee&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

package com.boi.grp.hooks;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;

import org.apache.log4j.Logger;
import org.assertj.core.api.SoftAssertions;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.boi.grp.driverManager.DriverManager;
import com.boi.grp.pageobjects.BasePage;
import com.boi.grp.pageobjects.Services.LaunchService;
import com.boi.grp.utilities.LogManager;
import com.boi.grp.utilities.apiutils.HIDHelper;
import com.boi.grp.utilities.datafactory.DataBaseUtil;

import io.cucumber.core.api.Scenario;
import io.cucumber.java.After;
import io.cucumber.java.Before;

public class Hooks {
	public DataBaseUtil dbUtil;
	public WebDriver driver;
	public WebDriver engagementBuilderDriver;
	public WebDriverWait wait;
	public Logger logman;
	public static Scenario testScenario;
	public static final String GLOBAL_CONFIG_PROPERTY = "src/test/java/com/boi/grp/globalconfig/GlobalConfig.properties";
	private static final String ERROR_PROPERTY = "src/test/resources/test_props/{ENV}/errors.properties";
	private static final String END_POINT_PROPERTY = "src/test/resources/test_props/{ENV}/apiEndpoints.properties";
	public Properties globalConfig;
	public static SoftAssertions softAssertions;
	public FileInputStream FIS = null;
	public Map<String, Map<String, String>> deserializeData;

	@Before
	public void init(Scenario scenario) {
		testScenario = scenario;
		System.setProperty("ScenarioName", scenario.getName());
		System.setProperty("ScenarioID", parseScenarioId(scenario.getId()));
		System.setProperty("PropFilePath", GLOBAL_CONFIG_PROPERTY);
		softAssertions = new SoftAssertions();
		LogManager.resetLogger();
		logman = LogManager.getInstance();
		logman.debug("Scenario Name is =" + System.getProperty("ScenarioName"));
		loadGlobalConfig();
		failSafePropertyGenenration();
		setDataInSystemPropertiesForRunConfigurationUsingExcel();
		writePlatformAndTypeDetailsForReport();
		if (System.getProperty("TYPE", "").equalsIgnoreCase("DATABASE")) {
			dbUtil = new DataBaseUtil();
		} else if (System.getProperty("TYPE", "").equalsIgnoreCase("API")) {
		} else {
			setObjectRepoInSystemVariables();
			driver = new DriverManager().GetDriver(System.getProperty("PLATFORM"), System.getProperty("TYPE"));
			invoke();
		}

		if (System.getProperty("ENGAGEMENT_BUILDER_REQUIRED", "").equals("TRUE")) {
			engagementBuilderDriver = new DriverManager()
					.GetDriverForBrowsers(System.getProperty("ENGAGEMENT_BUILDER_BROWSER"));
		}
	}

	@After
	public void tearDown() throws Error {
		try {
			if (!(driver.toString().contains("(null)"))) {
				driver.quit();
			}
			if(System.getProperty("PLATFORM").equalsIgnoreCase("BROWSERSTACK") 
				&& System.getProperty("TYPE").equalsIgnoreCase("APPLICATION")){
				HIDHelper helper = new HIDHelper();
				helper.deleteDeviceByUser(System.getProperty("HID_Device_UserId"));
			}
			handleSoftAssertions();
		} catch (Throwable e) {
			logman.warn("Error in teardown, message =  " + e.getMessage());
			//throw new Error("There are Soft Assertion Failures");
		}
	}

	public void handleSoftAssertions() {
		List<Throwable> list = softAssertions.errorsCollected();
		StringBuilder builder = null;
		if (list.size() > 0) {
			builder = new StringBuilder();
			for (Throwable errorValue : list) {
				builder.append("There are Soft Assertion Failures : \n ").append(errorValue.getMessage()).append("\n");
			}
			new BasePage().insertErrorMessageToHtmlReport(builder.toString());
		} else {
			new BasePage().insertMessageToHtmlReport("There are no SoftAssertions Failures");
		}
		try {
			softAssertions.assertAll();
		} catch (Throwable e) {
			logman.warn("There are " + builder.toString());
			throw new Error("There are Soft Assertion Failures");
		}
	}

	public String parseScenarioId(String scenarioId) {
		try {
			String[] arr = scenarioId.split("/");
			return arr[arr.length - 1].replaceAll(":", "_");
		} catch (Throwable e) {
			logman.error("Error in parsing please check parseScenarioId method, error = " + e.getMessage());
			return "";
		}
	}

	public void loadGlobalConfig() {
		try {
			FIS = new FileInputStream(GLOBAL_CONFIG_PROPERTY);
			globalConfig = new Properties();
			FileInputStream globalProps = new FileInputStream(GLOBAL_CONFIG_PROPERTY);
			globalConfig.load(globalProps);
			globalProps.close();

			if (globalConfig.getProperty("TYPE").equalsIgnoreCase("API")) {
				failSafePropertyGenenration();
				FileInputStream endpointProps = new FileInputStream(
						END_POINT_PROPERTY.replace("{ENV}", globalConfig.getProperty("ENVIRONMENT")));
				globalConfig.load(endpointProps);
				endpointProps.close();

				FileInputStream errorProps = new FileInputStream(
						ERROR_PROPERTY.replace("{ENV}", globalConfig.getProperty("ENVIRONMENT")));
				globalConfig.load(errorProps);
				errorProps.close();
			}
			logman.debug("property files are loaded successfully");
		} catch (Exception e) {
			logman.error("Error Occurred Inside init block in Hooks, Error Description=" + e.getMessage());
		}
	}

	public void failSafePropertyGenenration() {
		try {
			for (Object prop : globalConfig.keySet()) {
				if (System.getenv(prop.toString()) != null) {
					System.setProperty(prop.toString().trim().toUpperCase(), System.getenv(prop.toString()));
					logman.info(prop.toString().trim().toUpperCase() + " property is set from environment to "
							+ System.getenv(prop.toString()));
				} else {
					System.setProperty(prop.toString().trim().toUpperCase(), globalConfig.getProperty(prop.toString()));
					logman.info(prop.toString().trim().toUpperCase() + " property is set from environment to "
							+ globalConfig.getProperty(prop.toString()));
				}
			}
		} catch (Exception e) {
			logman.error("Error Occurred Inside failSafePropertyGenenration block in Hooks, Error Description="
					+ e.getMessage());
		}
	}

	public WebDriver GetDriver() {
		return this.driver;
	}

	public void setDriver(WebDriver driver) {
		this.driver = driver;
	}

	public void setDataInSystemPropertiesForRunConfigurationUsingExcel() {
		try {
			if (System.getProperty("EXCEL_CONFIGURATION").equalsIgnoreCase("TRUE")) {
				List<Map<String, String>> data = getDeserializeDataForExcelConfiguration();
				for (Map<String, String> map : data) {
					if (System.getProperty("ScenarioName").equalsIgnoreCase(map.get("ScenarioName"))) {
						map.remove("ScenarioName");
						map.remove("DEVICECONFIGURATION");
						for (Map.Entry<String, String> entry : map.entrySet()) {
							if (!entry.getValue().isEmpty()) {
								System.setProperty(entry.getKey(), entry.getValue());
								logman.info(entry.getKey().trim().toUpperCase()
										+ " property is set from environment to " + entry.getValue());
							}
						}
					}
				}
				logman.info("Added System variables for all the deserialize data");
			}
		} catch (Exception e) {
			logman.error("Error in setDataInSystemPropertiesForMobileCenterParallelConfiguration mrthod, Error = "
					+ e.getMessage());
		}
	}

	@SuppressWarnings("unchecked")
	public List<Map<String, String>> getDeserializeDataForExcelConfiguration() {
		List<Map<String, String>> excelConfiguration = new ArrayList<Map<String, String>>();

		try {
			FileInputStream fis = new FileInputStream(System.getProperty("user.dir") + "/target/listData");
			ObjectInputStream ois = new ObjectInputStream(fis);
			excelConfiguration = (List<Map<String, String>>) ois.readObject();
			ois.close();
			fis.close();
		} catch (IOException e) {
			logman.error("Error in getDeserializeDataForMCConfiguration, Error = " + e.getMessage());
			return excelConfiguration;
		} catch (ClassNotFoundException e) {
			logman.error("Class not found, Error = " + e.getMessage());
			return excelConfiguration;
		}
		logman.info("Deserialization of excel data is complete");
		return excelConfiguration;
	}

	public void writePlatformAndTypeDetailsForReport() {
		try {
			Properties prop = new Properties();
			prop.load(new FileReader(System.getProperty("user.dir") + "/src/test/resources/report.properties"));
			// two keys REPORT_PLATFORM,REPORT_PLATFORM_TYPE,DEVICENAME
			if (prop.getProperty("REPORT_PLATFORM") == null) {
				setKeyInProperties();
			} else {
				boolean deviceNameFlag = false;
				String existingDeviceName = null;
				String existingPlatform = prop.getProperty("REPORT_PLATFORM");
				String existingType = prop.getProperty("REPORT_PLATFORM_TYPE");
				if (prop.getProperty("REPORT_DEVICE_NAME") != null) {
					existingDeviceName = prop.getProperty("REPORT_DEVICE_NAME");
					deviceNameFlag = true;
				}
				if (!existingPlatform.contains(System.getProperty("PLATFORM"))) {
					amendKeysInExistingPropertiesFile("REPORT_PLATFORM",
							existingPlatform + "," + System.getProperty("PLATFORM"));
				}

				if (!existingType.contains(System.getProperty("TYPE"))) {
					amendKeysInExistingPropertiesFile("REPORT_PLATFORM_TYPE",
							existingType + "," + System.getProperty("TYPE"));
				}

				if (deviceNameFlag) {
					if (!existingDeviceName.contains(System.getProperty("DEVICENAME"))) {
						amendKeysInExistingPropertiesFile("REPORT_DEVICE_NAME",
								existingDeviceName + "," + System.getProperty("DEVICENAME"));
					}
				}
			}

		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public void setObjectRepoInSystemVariables() {
		try {
			File file = new File(System.getProperty("user.dir") + "/src/test/resources/repository");
			Properties properties = new Properties();
			File[] fileList = file.listFiles();
			String eachFile;
			assert fileList != null;
			for (File fileTemp : fileList) {
				eachFile = fileTemp.getAbsolutePath();
				FileInputStream fis = new FileInputStream(eachFile);
				properties.load(fis);
				Set<Object> setOfKeys = properties.keySet();
				for (Object key : setOfKeys) {
					if (System.getenv(key.toString()) != null) {
						System.setProperty(key.toString().trim(), System.getenv(key.toString()));
					} else {
						System.setProperty(key.toString().trim(), properties.getProperty(key.toString()));
					}
					// System.setProperty(key.toString().trim(),
					// properties.getProperty(key.toString()));
				}
			}
		} catch (Throwable e) {
			logman.error("Error in storing repository values in System properties, Error = " + e.getMessage());
		}
	}

	public void setKeyInProperties() {
		OutputStream outputStream = null;
		try {
			Properties properties = new Properties();
			outputStream = new FileOutputStream(
					System.getProperty("user.dir") + "/src/test/resources/report.properties");
			properties.setProperty("REPORT_PLATFORM", System.getProperty("PLATFORM"));
			properties.setProperty("REPORT_PLATFORM_TYPE", System.getProperty("TYPE"));
			if (System.getProperty("DEVICENAME") != null) {
				properties.setProperty("REPORT_DEVICE_NAME", System.getProperty("DEVICENAME"));
			}
			properties.store(outputStream, "");
		} catch (Exception e) {
			logman.error("Error in setKeyInProperties method, Error = " + e.getMessage());
		} finally {
			try {
				outputStream.close();
			} catch (IOException e) {
				logman.error(
						"Error in closing output steam while appending data in globalConfig properties file, Error =  "
								+ e.getMessage());
			}
		}
	}

	public void amendKeysInExistingPropertiesFile(String key, String data) {
		OutputStream outputStream = null;
		FileInputStream fileIn;
		try {
			Properties properties = new Properties();
			File file = new File(System.getProperty("user.dir") + "/src/test/resources/report.properties");
			fileIn = new FileInputStream(file);
			properties.load(fileIn);
			outputStream = new FileOutputStream(
					System.getProperty("user.dir") + "/src/test/resources/report.properties");
			properties.setProperty(key, data);
			properties.store(outputStream, "");
		} catch (Exception e) {
			logman.error("Error in amendKeysInExistingPropertiesFile method, Error = " + e.getMessage());
		} finally {
			try {
				outputStream.close();
			} catch (IOException e) {
				logman.error(
						"Error in closing output steam while appending data in globalConfig properties file, Error =  "
								+ e.getMessage());
			}
		}
	}

	public void invoke() {
		new LaunchService(GetDriver()).invoke();
	}
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&TESEEE&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

package com.boi.grp.pageobjects;

import static io.qameta.allure.Allure.step;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.net.URL;
import java.time.Duration;
import java.util.*;
import java.util.concurrent.TimeUnit;
import java.util.function.Function;
import java.util.logging.Level;

import com.boi.grp.hooks.Hooks;
import com.boi.grp.utilities.LogManager;
import io.appium.java_client.MultiTouchAction;
import io.appium.java_client.TouchAction;
import org.apache.log4j.Logger;

import org.junit.Assert;
import org.openqa.selenium.*;
import org.openqa.selenium.NoSuchElementException;
import org.openqa.selenium.html5.Location;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.interactions.Keyboard;
import org.openqa.selenium.interactions.Mouse;
import org.openqa.selenium.remote.*;
import org.openqa.selenium.support.ui.*;


import io.appium.java_client.AppiumDriver;
import io.qameta.allure.Allure;
import io.qameta.allure.model.Status;


public class BasePageForAllPlatform extends BasePage {
    public Logger logMan = null;
    public WebDriver driver = null;
    public WebDriverWait wait = null;
    AppiumDriver appiumDriver;
    protected String deviceType;
    public String devTypeToGetProperty;
    public final String CONTEXTVIEW1 = "WEBVIEW_com.bankofireland.tcmb";
    public final String CONTEXTVIEW2 = "WEBVIEW_";
    public final String CONTEXTVIEW3 = "WEBVIEW_com.bankofireland.boiinapp";

    public BasePageForAllPlatform(WebDriver driver) {
        this.driver = driver;
        if (!System.getProperty("TYPE").equalsIgnoreCase("BROWSER") ) {
        	if(!driver.toString().contains("RemoteWebDriver"))
            appiumDriver = (AppiumDriver) driver;
        }
        logMan = LogManager.getInstance();
        try {
            devTypeToGetProperty = getDeviceType();
        } catch (Exception e) {
            e.getMessage();
        }
        wait = new WebDriverWait(driver, Integer.valueOf(System.getProperty("EXPLICITWAIT")));
        driver.manage().timeouts().implicitlyWait(Integer.valueOf(System.getProperty("IMPLICITWAIT")),TimeUnit.SECONDS);

           }

    public BasePageForAllPlatform() {

    }

    public void appendScreenshotToCucumberReport() {
        try {
            final byte[] screenshot = ((TakesScreenshot) driver).getScreenshotAs(OutputType.BYTES);
            Hooks.testScenario.embed(screenshot, "image/png");
            logInfo("screen shot is captured");
        } catch (Throwable e) {
            logError("appendScreenshotToCucumberReport, Error=" + e.getMessage());
        }
    }

    public void setValue(WebElement Field, String ValueToBeSet) {
        try {
            if (Field.isDisplayed()) {
                wait.until(ExpectedConditions.elementToBeClickable(Field));
                Field.clear();
                logMessage("Field  with description " + Field.toString() + " is cleared successfully");
                Field.sendKeys(ValueToBeSet);
//                logMessage("Value with description " + ValueToBeSet + " is set successfully in Field  = "
//                        + Field.toString());
                updateReportStatus("setValue", "Value with description '" + ValueToBeSet + "' is set successfully","PASSED", "NO");
            }
        } catch (Exception e) {
            logError("Field Not found, Field with description " + Field.toString() + " Error=" + e.getMessage());
        }
    }

    public void setValue(By Field, String ValueToBeSet) {
        try {
            if (driver.findElement(Field).isDisplayed()) {
                wait.until(ExpectedConditions.elementToBeClickable(Field));
                driver.findElement(Field).clear();
                logMessage("Field  with description " + Field.toString() + " is cleared successfully");
                waitForSeconds(3);
                driver.findElement(Field).sendKeys(ValueToBeSet);
//                logMessage("Value with description " + ValueToBeSet + " is set successfully in Field  = "
//                        + Field.toString());
                updateReportStatus("setValue", "Value with description '" + ValueToBeSet + "' is set successfully","PASSED", "NO");
            }
        } catch (Exception e) {
            logError("Field Not found, Field with description " + Field.toString() + " Error=" + e.getMessage());
        }
    }

    public void EnterClick() {
        try {
            logMan.info("EnterClick Start");
            Actions action = new Actions(driver);
            action.sendKeys(Keys.ENTER).build().perform();
            logMan.info("EnterClick End");
        } catch (Exception e) {
            logError("Error in EnterClick method, Error = " + e.getMessage());
        }
    }

    /**
     * @param ElementToBeClicked
     */
    public void click(WebElement ElementToBeClicked) {
        try {
            wait.until(ExpectedConditions.elementToBeClickable(ElementToBeClicked));
            highlight(ElementToBeClicked);
            ElementToBeClicked.click();
            logMessage("Clicked successfully on Element with Description " + ElementToBeClicked.toString());
            //updateReportStatus("click()","Clicked successfully on Element with Description "+ ElementToBeClicked.toString(),"PASSED","NO");
        } catch (NoSuchElementException e) {
            //logError("Field Not found, Field with description " + ElementToBeClicked.toString());
            updateReportStatus("click()",ElementToBeClicked.toString()+" Field Not found " +e.getMessage(), "ERROR","YES");
        }
    }
    
    /**
     * Click method when having Xpath
     *
     * @param by
     */
    public void click(By by) {
        try {
            WebElement Field;
            if (driver.findElements(by).size() == 1) {
                Field = driver.findElement(by);
                Actions act = new Actions(driver);
                act.moveToElement(Field).perform();
                wait.until(ExpectedConditions.elementToBeClickable(Field));
                Field.click();
                logMessage("Clicked successfully on Element, Field = " + Field);
                //updateReportStatus("click()","Clicked successfully on Element, Field = "+ Field,"PASSED","NO");
            } else {
                //logError("Field Not found, Xpath is = " + by);
                updateReportStatus("click()","Field Not found, Xpath is = "+ by,"FAILED","NO");
            }
        } catch (Exception e) {
            highlight(driver.findElement(by));
            //logError("Error occured clicking on " + by + " Description =" + e.getMessage());
            updateReportStatus("click()","Error occured clicking on "+by+" Description =" + e.getMessage(),"ERROR","NO");
        }
    }
    
    /**
     * Click on link
     *
     * @param LinkText
     */
    public void clickonLink(String LinkText) {
        try {
            WebElement Field;
            if (driver.findElements(By.linkText(LinkText)).size() == 1) {
                Field = driver.findElement(By.linkText(LinkText));
                wait.until(ExpectedConditions.elementToBeClickable(Field));
                highlight(Field);
                Field.click();
                //logMessage("Clicked successfully on Field " + Field + " whose Link with text = " + LinkText);
                updateReportStatus("clickonLink()","Clicked successfully on Field "+ Field+ " whose Link with text = "+ LinkText,"PASSED","NO");
                waitForBrowserToCompleteProcessing();
            } else {
                //logError("Link Not found,  Link Text= " + LinkText);
                updateReportStatus("clickonLink()","Link Not found,  Link Text= "+ LinkText,"FAILED","NO");
            }
        } catch (Exception e) {
        	updateReportStatus("clickonLink()","Error occurred clicking on Link with text "+ LinkText+ " Description =" + e.getMessage(),"ERROR","NO");
           // logError("Error occurred clicking on Link with text " + LinkText + " Description =" + e.getMessage());
        }
    }
    
    public void clickJS(WebElement element) {
        boolean blnClicked = false;
        String valAttr=element.toString();
        JavascriptExecutor js = (JavascriptExecutor) driver;
        js.executeScript("arguments[0].scrollIntoView();", element);

        if (isElementDisplayed(element)) {
            if(element.getText().isEmpty()){
                valAttr=element.toString();
            }else{
                valAttr=element.getText();
            }
            try {
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();", element);

            } catch (StaleElementReferenceException e) {
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();", element);
            } catch (Exception e) {
                updateReportStatus("clickJS()","clickJS, error = "+ e.getMessage() ,"FAILED","NO");
            }
            blnClicked = true;
        }
        try {
            if (blnClicked) {
                logMessage("Element is clicked successfully, webelement = "+ valAttr);
                //updateReportStatus("clickJS()","Element is clicked successfully, webelement = "+ valAttr ,"PASSED","NO");
            } else {
                updateReportStatus("clickJS()","Element is NOT clicked, webelement = "+ valAttr ,"FAILED","YES");
            }
        } catch (Exception e) {
            updateReportStatus("clickJS()","clickJS, error = "+ e.getMessage() ,"ERROR","YES");
        }
    }
    
    public void clickJS(By locator) {
        boolean blnClicked = false;
        String valAttr=locator.toString();
        JavascriptExecutor js = (JavascriptExecutor) driver;
        js.executeScript("arguments[0].scrollIntoView();",
                driver.findElement(locator));
        if (isElementDisplayed(locator)) {
            if(getText(locator).isEmpty()){
                valAttr=locator.toString();
            }else{
                valAttr=getText(locator);
            }
            try {
                WebElement element = driver.findElement(locator);
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();", element);

            } catch (StaleElementReferenceException e) {
                WebElement element = driver.findElement(locator);
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();", element);
            } catch (Exception e) {
                updateReportStatus("clickJS()","clickJS, error = "+ e.getMessage() ,"FAILED","YES");
            }
            blnClicked = true;
        }
        try {
            Assert.assertTrue(blnClicked);
            logMessage("Element is clicked successfully, locator = "+ valAttr);
            //updateReportStatus("clickJS()","Element is clicked successfully, locator = "+ valAttr ,"PASSED","NO");
        } catch (Exception e) {
        	updateReportStatus("clickJS()","Element is NOT clicked, locator = "+ locator + e.getMessage() ,"ERROR","NO");
        }
    }

    public void clickJS(By locator, String pageCtrlName) {
        boolean blnClicked = false;
        JavascriptExecutor js = (JavascriptExecutor) driver;
        js.executeScript("arguments[0].scrollIntoView();",
                driver.findElement(locator));
        int waitTime = Integer.parseInt(System.getProperty("IMPLICITWAIT"));
        if (isElementDisplayed(locator)) {
            try {
                WebElement element = driver.findElement(locator);
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();", element);

            } catch (StaleElementReferenceException e) {
                WebElement element = driver.findElement(locator);
                JavascriptExecutor executor = (JavascriptExecutor) driver;
                executor.executeScript("arguments[0].click();", element);
            } catch (Exception e) {
                updateReportStatus("clickJS()","clickJS, error = "+ e.getMessage() ,"FAILED","YES");
            }
            blnClicked = true;
        }
        try {
        	if(blnClicked){
                updateReportStatus("clickJS",pageCtrlName+" Element is clicked successfully","PASSED","NO");
            }else {
                updateReportStatus("clickJS",pageCtrlName+" Element is Not clicked successfully","FAILED","YES");
            }
        } catch (Exception e) {
            updateReportStatus("clickJS",pageCtrlName+" Element is Not clicked successfully","ERROR","YES");
        }
    }

    /**
     * @param ElementToBeDoubleClicked
     */
    public void doubleclick(WebElement ElementToBeDoubleClicked) {
        try {
            wait.until(ExpectedConditions.elementToBeClickable(ElementToBeDoubleClicked));
            Actions action = new Actions(driver);
            action.doubleClick(ElementToBeDoubleClicked).build().perform();
            logMessage("Double clicked successfully on Element with Description " + ElementToBeDoubleClicked.toString());
        } catch (NoSuchElementException e) {
            logError("Field Not found, Field with description " + ElementToBeDoubleClicked.toString());
        }
    }

    /**
     * @param by
     */
    public void doubleclick(By by) {
        try {
            wait.until(ExpectedConditions.elementToBeClickable(driver.findElement(by)));
            Actions action = new Actions(driver);
            action.moveToElement(driver.findElement(by)).doubleClick().build().perform();
            logMessage("Double clicked successfully on Element with Xpath ");
        } catch (NoSuchElementException e) {
            logError("Field Not found, Field with xpath ");
        }
    }

    /**
     * @param Element
     * @param SuccessMessage
     * @param FailureMessage
     * @return whether element is displayed or not
     */
    public boolean verifyElement(WebElement Element, String SuccessMessage, String FailureMessage) {
        try {
            if (Element.isDisplayed()) {
                if (SuccessMessage != "") {
                    logMessage(SuccessMessage);
                }
                return true;
            } else {
                if (FailureMessage != "") {
                    logError(FailureMessage);
                }
                return false;
            }
        } catch (NoSuchElementException e) {
            logError("No Such Element Found, Element desctiption  =" + Element.toString());
            return false;
        }
    }

    /**
     * @param Xpath
     * @param SuccessMessage
     * @param FailureMessage
     * @return verification for the visibility of the element
     */
    public boolean verifyElement(String Xpath, String SuccessMessage, String FailureMessage) {
        try {
            if (driver.findElements(By.xpath(Xpath)).size() > 0) {
                if (SuccessMessage != "") {
                    logMessage(SuccessMessage);
                }
                return true;
            } else {
                if (FailureMessage != "") {
                    logError(FailureMessage);
                }
                return false;
            }
        } catch (NoSuchElementException e) {
            logError("No Such Element Found, Element Xpath  =" + Xpath);
            return false;
        }
    }

    /**
     * wait for page to be loaded completely
     */
    public void waitForBrowserToCompleteProcessing() {
        wait.until((ExpectedCondition<Boolean>) wd ->
                ((JavascriptExecutor) wd).executeScript("return document.readyState").equals("complete"));
        logInfo("Page load completed");
    }

    /**
     * This will be used to mousehover when having xpath
     *
     * @param Xpath
     */
    public void mouseHover(String Xpath) {
        if (driver.findElements(By.xpath(Xpath)).size() == 1) {
            logInfo("mouseHover, Found element with xpath = " + Xpath);
            Actions action = new Actions(driver);
            action.moveToElement(driver.findElement(By.xpath(Xpath))).click().perform();
            logMessage("MouseHover done over" + Xpath);
        } else if (driver.findElements(By.xpath(Xpath)).size() > 1) {
            logError("More than 1 element identified with xpath " + Xpath);
        } else {
            logError("No element identified with xpath " + Xpath);
        }
    }

    /**
     * This will be used to mousehover when having WebElement
     *
     * @param element
     */
    public void mouseHover(WebElement element) {
        try {
            Actions action = new Actions(driver);
            action.moveToElement(element).click().perform();
            logMessage("MouseHover done over" + element.getText());
        } catch (Throwable t) {
            logError("Error Occured Inside mouseHover function");
        }
    }

    /**
     * Thread wait
     *
     * @param Seconds
     */
    public void waitForSeconds(int Seconds) {
        try {
            Thread.sleep(1000 * Seconds);
        } catch (Throwable e) {
            logError("Error Occured in waitForSeconds function's  thread.sleep section, reason = " + e.getMessage());
        }
    }

    /**
     * This will scroll up the page
     */
    public void scrollUp() {
        JavascriptExecutor jse = (JavascriptExecutor) driver;
        jse.executeScript("window.scrollBy(0,-550)", "");
        logMessage("Scrolled up the Page");
        waitForSeconds(1);
    }

    /**
     * This will scroll up the page A BIT
     */
    public void scrollUpAbit() {
        JavascriptExecutor jse = (JavascriptExecutor) driver;
        jse.executeScript("window.scrollBy(0,-100)", "");
        logMessage("Scrolled up the Page a bit");
        waitForSeconds(1);
    }

    /**
     * This will scroll down the page
     */
    public void scrollDown() {
        JavascriptExecutor jse = (JavascriptExecutor) driver;
        jse.executeScript("window.scrollBy(0,500)", "");
        logMessage("Scrolled down the Page");
        waitForSeconds(1);
    }

    /**
     * This will highlight element in RED
     *
     * @param element
     */
    public void highlight(WebElement element) {
        try {
            JavascriptExecutor jsDriver = (JavascriptExecutor) driver;
            jsDriver.executeScript("arguments[0].style.border='3px solid red'", element);
            logMessage("Highlighted successfully on " + element.toString());
        } catch (Exception e) {
            logError("Error Occured While Highlighting a control ,Reason = " + e.getMessage());
        }
    }

    /**
     * This will highlight element in BLUE
     *
     * @param element
     */
    public void highlightBlue(WebElement element) {
        try {
            JavascriptExecutor jsDriver = (JavascriptExecutor) driver;
            jsDriver.executeScript("arguments[0].style.border='3px solid blue'", element);
            logMessage("Highlighted successfully on " + element.toString());
        } catch (Exception e) {
            logError("Error Occured While Highlighting a control ,Reason = " + e.getMessage());
        }
    }

    /**
     * Check the presence of element
     *
     * @param by
     * @return boolean
     */
    public boolean checkElement(By by) {
        if (driver.findElements(by).size() == 1) {
            highlight(driver.findElements(by).get(0));
            logInfo("Found element with element = " + by);
            return true;
        } else
            return false;
    }

    /**
     * Check the presence of element and click
     *
     * @param by
     * @return boolean
     */
    public boolean checkElementAndClick(By by) {
        boolean returnvalue = false;
        if (checkElement(by)) {
            click(driver.findElement(by));
            logMessage("Clicked successfully on element with xpath = " + by);
            returnvalue = true;
        }
        return returnvalue;
    }

    /**
     * Double Click and presence of element
     *
     * @param by
     * @return boolean condition
     */
    public boolean checkElementAndDoubleClick(By by) {
        if (checkElement(by)) {
            doubleclick(by);
            logMessage("Clicked successfully on element with xpath = " + by);
            return true;
        } else
            return false;
    }

    /**
     * Select value from list of weblement
     *
     * @param SelectAsWebElement
     * @param ValueToBeSelected
     * @return boolean
     */
    public boolean selectValueFromList(WebElement SelectAsWebElement, String ValueToBeSelected) {
        try {
            Select list = new Select(SelectAsWebElement);
            list.selectByVisibleText(ValueToBeSelected);
            logMessage("Value " + ValueToBeSelected + " is selected successfully in the list " + SelectAsWebElement.toString());
        } catch (Exception e) {
            logError("Value " + ValueToBeSelected + " is not found in List " + SelectAsWebElement.toString());
            return false;
        }
        return true;
    }

    /**
     * Select value from list when having parent Xpath
     *
     * @param DropdownParentXpath
     * @param ValueToBeSelected
     * @return
     */
    public boolean selectValueFromList(By DropdownParentXpath, String ValueToBeSelected) {
        boolean returnvalue = false;
        try {
            List<WebElement> dropDownlist = driver.findElements(DropdownParentXpath);
            for (WebElement element : dropDownlist) {
                if (element.getText().equalsIgnoreCase(ValueToBeSelected)) {
                    element.click();
                    logMessage("Value " + ValueToBeSelected + " is selected successfully in the list , xpath = " + DropdownParentXpath);
                    returnvalue = true;
                    break;
                }
            }
        } catch (Exception e) {
            logError("Value " + ValueToBeSelected + " is not found in List, where Xpath =  " + ValueToBeSelected);
            returnvalue = false;
        }
        return returnvalue;
    }

    /**
     * Create new System Property to save data
     *
     * @param PropertyName
     * @param Value
     */
    public void createNewProperty(String PropertyName, String Value) {
        try {
            System.setProperty(PropertyName, Value);
            logMessage("Property with Name = " + PropertyName + " with value  = " + Value + " is created successfully");
        } catch (Throwable t) {
            logError("Property with Name = " + PropertyName + " with value  = " + Value + " is NOT created successfully, Error =" + t.getMessage());
        }
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public WebDriver context(String arg0) {
        logMessage("******inside Context" + appiumDriver.context(arg0));
        return appiumDriver.context(arg0);
    }


    /**
     * Wait Till ProcessingImage Is Displayed
     *
     * @param MaxProcessingTime
     * @param by
     * @param Maxwait
     */
    public void waitTillProcessingImageIsDisplayed(long MaxProcessingTime, By by, long Maxwait) {
        logMessage("Waiting For Processing to be completed....");
        try {
            wait = new WebDriverWait(driver, MaxProcessingTime);
            wait.until(ExpectedConditions.invisibilityOfElementLocated(by));
            wait = new WebDriverWait(driver, Maxwait);
        } catch (Throwable t) {
            logError("Processing of image is still going for field xpath = " + by);
        }
    }


    /**
     * Wait Till Locator Is Displayed
     */
    //Written By C114322
    public void waitForElementToBeDisplayed(By by) {
        logMessage("Waiting For Element to be displayed....");
        try {
            wait = new WebDriverWait(driver, Integer.valueOf(System.getProperty("EXPLICITWAIT")));
            wait.until(ExpectedConditions.visibilityOfElementLocated(by));
        } catch (Throwable t) {
            logError("Waiting For Element is still going for field xpath = " + by);
        }
    }

    /**
     * Wait Till Processing Icon Is Displayed
     *
     * @param MaxProcessingTime
     * @param by
     * @param Maxwait
     */
    public void waitTillProcessingIconIsDisplayed(long MaxProcessingTime, By by, long Maxwait) {
        logMessage("Waiting For Processing to be completed....");
        try {
            wait = new WebDriverWait(driver, MaxProcessingTime);
            wait.until(ExpectedConditions.invisibilityOfElementLocated(by));
            wait = new WebDriverWait(driver, Maxwait);
        } catch (Throwable t) {
            logError("Processing of icon is still continuing for field xpath = " + by);
        }
    }

    /**
     * Generate Random numbers
     *
     * @param DigitsOfTheRandomNumber
     * @return
     */
    public String generateRandomNumber(int DigitsOfTheRandomNumber) {
        logMessage("generateRandomNumber function - START");
        String returnValue = "";
        try {
            while (returnValue.length() != DigitsOfTheRandomNumber) {
                returnValue = String.valueOf((long) (Math.random() * 90000000000000000l)).substring(0, DigitsOfTheRandomNumber);
                ;
            }
        } catch (Throwable t) {
            returnValue = "Error";
        }
        logMessage("generateRandomNumber function - END");
        return returnValue;
    }

    /**
     * Generate Random string
     *
     * @return Function written by
     */
    public String generateRandomString() {
        logMessage("generateRandomString function - START");
        Random rand = new Random();
        String rand_str = "Test";
        int rand_int = rand.nextInt(999);
        logMessage("RANDOMLY GENERATED STRING IS:" + rand_str + rand_int);
        logMessage("generateRandomString function - END");
        return (rand_str + rand_int);
    }

    /**
     * Java Script Checking
     *
     * @param Term
     */
    public void JavascriptChecking(String Term) {
        String Page = null;
        JavascriptExecutor js = (JavascriptExecutor) driver;
        Page = js.executeScript("return document.documentElement.outerHTML;").toString();
        while (Page.contains(Term)) {
            try {
            	waitForSeconds(1);
                Page = js.executeScript("return document.documentElement.outerHTML;").toString();
            } catch (Throwable e) {
                logError("Java script checking Fails for Term = " + Term);
            }
        }
    }

    /**
     * Set Value in Disabled field
     *
     * @param element
     * @param ValueToBeSet
     */
    public void setValueInDisabledField(WebElement element, String ValueToBeSet) {

        if (element.isDisplayed()) {
            wait.until(ExpectedConditions.elementToBeClickable(element));
            JavascriptExecutor js = (JavascriptExecutor) driver;
            js.executeScript("arguments[0].removeAttribute('readonly')", element);
            element.clear();
            logMessage("Field " + element + " is cleared successfully");
            Actions action = new Actions(driver);
            action.sendKeys(ValueToBeSet).build().perform();
            String mouseclickScript = "if(document.createEvent){var evObj = document.createEvent('MouseEvents');evObj.initEvent('click',true, false); arguments[0].dispatchEvent(evObj);} else if(document.createEventObject){ arguments[0].fireEvent('onclick');}";
            //JavascriptExecutor js = (JavascriptExecutor) driver;
            //WebElement someElem = driver.findElement(By.xpath(Xpath));
            js.executeScript(mouseclickScript, element);
            logMessage("Value with description " + ValueToBeSet + " is set successfully in Field  = " + element);
        } else {
            logError("Field Not found, Field Name = " + element);
        }
    }

    /**
     * Compare value with expression
     *
     * @param ValueToBeCompared
     * @param ExpressionToBeEvaluated
     * @param ReferenceValueForComparision
     * @return boolean
     */
    public boolean comparevaluewithexpression(String ValueToBeCompared, String ExpressionToBeEvaluated, String ReferenceValueForComparision) {
        logInfo("comparevaluewithexpression function - START");
        boolean returnvalue = false;
        try {
            if (ExpressionToBeEvaluated.trim().equalsIgnoreCase("IS EQUAL TO")) {
                if (ValueToBeCompared.trim().toUpperCase().equalsIgnoreCase(ReferenceValueForComparision)) {
                    returnvalue = true;
                }
            } else {
                int IntegerValueToBeCompared = Integer.valueOf(ValueToBeCompared);
                int IntegerReferenceValueForComparision = 0;
                if (!ReferenceValueForComparision.contains(",")) {
                    IntegerReferenceValueForComparision = Integer.valueOf(ReferenceValueForComparision);
                }
                if (ExpressionToBeEvaluated.trim().equalsIgnoreCase("IS GREATER THAN")) {
                    if (IntegerValueToBeCompared > IntegerReferenceValueForComparision)
                        returnvalue = true;
                } else if (ExpressionToBeEvaluated.trim().equalsIgnoreCase("IS GREATER THAN EQUAL TO")) {
                    if (IntegerValueToBeCompared >= IntegerReferenceValueForComparision)
                        returnvalue = true;
                } else if (ExpressionToBeEvaluated.trim().equalsIgnoreCase("IS LESS THAN")) {
                    if (IntegerValueToBeCompared < IntegerReferenceValueForComparision)
                        returnvalue = true;
                } else if (ExpressionToBeEvaluated.trim().equalsIgnoreCase("IS LESS THAN EQUAL TO")) {
                    if (IntegerValueToBeCompared <= IntegerReferenceValueForComparision)
                        returnvalue = true;
                } else if (ExpressionToBeEvaluated.trim().equalsIgnoreCase("IS BETWEEN AND")) {
                    String[] refvaluesarray = ReferenceValueForComparision.split(",");
                    int refstartvalue = Integer.valueOf(refvaluesarray[0]);
                    int refendvalue = Integer.valueOf(refvaluesarray[1]);
                    if ((IntegerValueToBeCompared >= refstartvalue) & (IntegerValueToBeCompared <= refendvalue)) {
                        returnvalue = true;
                    }
                }
            }
        } catch (Throwable t) {
            logError("Error Occured Inside comparevaluewithexpression function, desc=" + t.getMessage());
        }
        logInfo("comparevaluewithexpression function - END");
        return returnvalue;
    }

    /**
     * Move to particular element
     *
     * @param element
     */
    public void moveToElement(WebElement element) {
        try {
            Actions action = new Actions(driver);
            action.moveToElement(element).build().perform();
            logMessage("successfully moved to the element " + element);
        } catch (Throwable t) {
            logError("Error Occured Inside moveToElement function, desc=" + t.getMessage());
        }
    }
    //Code added by Cards Team

    public WebDriver getWebDriver() {
        return driver;
    }

    public WebElement findElementByAccessibilityId(String arg0) {

        return ((AppiumDriver) driver).findElementByAccessibilityId(arg0);
    }

    public WebElement findElementById(String arg0) {

        return ((AppiumDriver) driver).findElementById(arg0);

    }

    //Wait for JQuery Load
    public void waitForJQueryLoad() {
        //Wait for jQuery to load
        //WebDriver tempDriver = driver.getWebDriver();
        WebDriverWait wait = new WebDriverWait(driver, 20);
        JavascriptExecutor jsExec = (JavascriptExecutor) driver;
        try {
        	waitForSeconds(1);
            ExpectedCondition<Boolean> jQueryLoad = driver -> ((Long) ((JavascriptExecutor) driver)
                    .executeScript("return jQuery.active") == 0);

            //Get JQuery is Ready
            boolean jqueryReady = (Boolean) jsExec.executeScript("return jQuery.active==0");

            //Wait JQuery until it is Ready!
            if (!jqueryReady) {
            	logMessage("JQuery is NOT Ready!");
                //Wait for jQuery to load
                wait.until(jQueryLoad);
            } else {
            	logMessage("JQuery is Ready!");
            }
        } catch (Exception e) {
        	logMessage("javascript error: jQuery is not defined");
        }

    }

    public void waitForPageLoaded() {

        //WebDriver tempDriver = driver.getWebDriver();

        ExpectedCondition<Boolean> expectation = new ExpectedCondition<Boolean>() {
            public Boolean apply(WebDriver tempDriver) {
                return ((JavascriptExecutor) tempDriver).executeScript("return document.readyState").equals("complete");
            }
        };

        // WebDriverWait wait = new WebDriverWait(driver.getWebDriver(), 30);

        try {

            wait.until(expectation);

        } catch (Exception ex) {

            ex.printStackTrace();
        }
    }

    

    protected By getObject(String objKey) {
        if(objKey.contains("~")){
            By locator=null;
            String[] arr = objKey.split("~");
            String key=arr[0];
            String value = arr[1];
            switch (key.toUpperCase()){
                case "XPATH":
                    locator = By.xpath(value);
                    break;
                case "ID":
                    locator = By.id(value);
                    break;
            }
            return locator;
        }else {
            return getObjectBy(objKey);
        }
    }


    protected By getObject(String objKey, int index) {

        return getObjectBy(objKey, index);
    }
	
	protected By getObject(String objKey, String value) {

		return getObjectBy(objKey,value);
	}
	

    /*
        protected By getObject(String objKey, Properties propertyFile) {

            return getObjectBy(objKey,propertyFile);
        }
    */
    public String getMessageText(String msgText, String Module) {
        String msgTextValue = null;
        try {
            switch (Module.toUpperCase()) {
                case "UXPBANKING365":
                    msgTextValue = System.getProperty(msgText);
                    break;
//                case "CARDS":
//                    msgTextValue = System.getProperty(msgText);
//                    break;
//                case "ACCOUNTS":
//                    msgTextValue = System.getProperty(msgText);
//                    break;
//                case "SERVICES":
//                    msgTextValue = System.getProperty(msgText);
//                    break;
//                case "APPLY":
//                    msgTextValue = System.getProperty(msgText);
//                    break;
//                case "PAYMENTS":
//                    msgTextValue = System.getProperty(msgText);
//                    break;
                default:
                    logMan.error("Error Occured inside getMessageText: " + msgText);
                    break;
            }
        } catch (Exception e) {
        	updateReportStatus("getMessageText", "Error Occured inside getMessageText: "+msgText, "ERROR", "YES");
        }
        return msgTextValue;
    }


    //Written By C114323
    public String getLoginData(String userData) {
        String loginData = null;
        loginData = System.getProperty(userData);
        return loginData;
    }

    /* Function to return device type
     */
    protected String getDeviceType() throws Exception {

        deviceType = System.getProperty("DEVICETYPE");
        try {
            String devTypeToGetProperty = "";
            if (deviceType.equalsIgnoreCase("MobileWeb")) {
                devTypeToGetProperty = "mw.";
            } else if (deviceType.equalsIgnoreCase("Web")) {
                devTypeToGetProperty = "w.";
            } else if (deviceType.equalsIgnoreCase("TabletWeb")) {
                devTypeToGetProperty = "tw.";
            } else if (deviceType.equalsIgnoreCase("App")) {
                devTypeToGetProperty = "mw.";
            }
            return devTypeToGetProperty;
        } catch (Exception e) {
            logError("Exception in Method deviceType(): " + e.getMessage());
            throw new Exception();
        }

    }

    public String getAPIendpoint(String locatorName) {
        String locatorProperty = System.getProperty(locatorName);
        //String locatorProperty = CCpropertyFile.getProperty(locatorName);
        logMessage(locatorProperty.toString());
        String endpt = locatorProperty.toString();

        logMessage("*****InsideRepoParser****" + endpt);
        return endpt;
    }

    //public By getbjectLocator(String locatorName)
    //Written by Atmaj
    public By getObjectBy(String locatorName) {
        String locatorProperty = null;
        try {
            locatorProperty = System.getProperty(locatorName);
        } finally {
            if (locatorProperty==null) {
                if(locatorName.contains("app.")){
                    String[] arr = locatorName.split("\\.");
                    StringBuilder builder = new StringBuilder();
                    for (int i=1;i<arr.length;i++){
                        builder.append(arr[i]).append(".");
                    }
                    String str = builder.toString();
                    String newStr = str.substring(0, str.length() - 1);

                    locatorName="mw."+newStr;
                    locatorProperty = System.getProperty(locatorName);
                }
            }
        }
        String locatorType = locatorProperty.split("~")[0];
        String locatorValue = locatorProperty.split("~")[1];

        By locator = null;
        try {
            switch (locatorType.toUpperCase()) {
                case "ID":
                    locator = By.id(locatorValue);
                    break;
                case "NAME":
                    locator = By.name(locatorValue);
                    break;
                case "CSSSELECTOR":
                    locator = By.cssSelector(locatorValue);
                    break;
                case "LINKTEXT":
                    locator = By.linkText(locatorValue);
                    break;
                case "PARTIALLINKTEXT":
                    locator = By.partialLinkText(locatorValue);
                    break;
                case "TAGNAME":
                    locator = By.tagName(locatorValue);
                    break;
                case "XPATH":
                    locator = By.xpath(locatorValue);
                    break;
                default:
                    logMan.error(" Object identifier needs to be corrected in property file: " + locatorValue);
                    break;
            }
        } catch (Throwable e) {
            logMan.fatal(" Object identifier not found in property file: " + e.getMessage());

        }
        return locator;

    }

    public By getObjectBy(String locatorName, int index) {
        String locatorProperty = System.getProperty(locatorName);
        logMessage(locatorProperty.toString());
        String locatorType = locatorProperty.split("~")[0];
        String locatorValue = locatorProperty.split("~")[1];

        if (locatorValue.contains("DINDEX")) {

            String[] arrlocatorValue = locatorValue.split(" ");
            for (int i = 0; i < arrlocatorValue.length; i++) {

                if (arrlocatorValue[i].contains("DINDEX")) {
                    arrlocatorValue[i] = arrlocatorValue[i].replaceAll("DINDEX", String.valueOf(index));
                }

            }
            String JoinString = String.join(" ", arrlocatorValue);
            logMan.info("******JOINSTRING*******" + JoinString);
            locatorValue = JoinString;
        }

        By locator = null;
        try {
            switch (locatorType.toUpperCase()) {
                case "ID":
                    locator = By.id(locatorValue);
                    break;
                case "NAME":
                    locator = By.name(locatorValue);
                    break;
                case "CSSSELECTOR":
                    locator = By.cssSelector(locatorValue);
                    break;
                case "LINKTEXT":
                    locator = By.linkText(locatorValue);
                    break;
                case "PARTIALLINKTEXT":
                    locator = By.partialLinkText(locatorValue);
                    break;
                case "TAGNAME":
                    locator = By.tagName(locatorValue);
                    break;
                case "XPATH":
                    locator = By.xpath(locatorValue);
                    break;
                default:
                    logMan.error(" Object identifier needs to be corrected in property file: " + locatorValue);
                    break;
            }
        } catch (Exception e) {
            logMan.fatal(" Object identifier not found in property file: " + e.getMessage());

        }
        logMan.info("LOCATOR" + locator);
        return locator;
    }
    
    public By getObjectBy(String locatorName,String value)
    {
        String newLocatorProperty = null;
        String locatorProperty = null;
        try {
            locatorProperty = System.getProperty(locatorName);
        } finally {
            if (locatorProperty==null) {
                if(locatorName.contains("app.")){
                    String[] arr = locatorName.split("\\.");
                    StringBuilder builder = new StringBuilder();
                    for (int i=1;i<arr.length;i++){
                        builder.append(arr[i]).append(".");
                    }
                    String str = builder.toString();
                    String newStr = str.substring(0, str.length() - 1);

                    locatorName="mw."+newStr;
                    locatorProperty = System.getProperty(locatorName);
                }
            }
        }

        assert locatorProperty != null;
        if(locatorProperty.contains("DVALUE")){
            String[] arr = locatorProperty.split("DVALUE");
            String firstPart = arr[0];
            String secondPart=arr[1];
            newLocatorProperty = firstPart + value + secondPart;
        }
        assert newLocatorProperty != null;
        String locatorType;
        String locatorValue;
        String[] newArr = newLocatorProperty.split("~");
        if(newArr.length>2){
            StringBuilder builder = new StringBuilder();
            for (int i=1;i<newArr.length;i++){
                builder.append(newArr[i]).append("~");
            }
            String builderString = builder.toString();
            locatorValue= builder.substring(0, builderString.length() - 1);
            locatorType = newLocatorProperty.split("~")[0];
        }else{
            locatorType = newLocatorProperty.split("~")[0];
            locatorValue = newLocatorProperty.split("~")[1];
        }

        By locator = null;
        try {
            switch(locatorType.toUpperCase())
            {
                case "ID":
                    locator = By.id(locatorValue);
                    break;
                case "NAME":
                    locator = By.name(locatorValue);
                    break;
                case "CSSSELECTOR":
                    locator = By.cssSelector(locatorValue);
                    break;
                case "LINKTEXT":
                    locator = By.linkText(locatorValue);
                    break;
                case "PARTIALLINKTEXT":
                    locator = By.partialLinkText(locatorValue);
                    break;
                case "TAGNAME":
                    locator = By.tagName(locatorValue);
                    break;
                case "XPATH":
                    locator = By.xpath(locatorValue);
                    break;
                default:
                    logMan.error(" Object identifier needs to be corrected in property file: "+locatorValue);
                    break;
            }
        } catch (Throwable e) {
            logMan.fatal(" Object identifier not found in property file: "+e.getMessage());

        }
        logMan.info("LOCATOR" + locator);
        return locator;
    }


    /* Function written by C114323
     * Wait till perticular element gets loaded
     * @parameter Webelement
     *//*
    public boolean isElementDisplayed(WebElement element) {
        int timeout = Integer.valueOf(System.getProperty("IMPLICITWAIT"));
        boolean elementPresent = true;
        int count = 0;
        driver.manage().timeouts().implicitlyWait(timeout, TimeUnit.SECONDS);
        try {
            while (true) {
                try {
                    if (element.isDisplayed()) {
                        logMessage("Element is displayed successfully for element, = " + element);
                        break;
                    } else {
                        if (count == timeout) {
                            elementPresent = false;
                            logWarning("Element not displayed for element, = " + element);
                            break;
                        }
                        driver.manage().timeouts().implicitlyWait(timeout, TimeUnit.SECONDS);
                        count++;
                    }

                } catch (Throwable ex) {
                    if (count == timeout) {
                        elementPresent = false;
                        logError("Element not displayed for element, = " + element);
                        break;
                    }
                    driver.manage().timeouts().implicitlyWait(timeout, TimeUnit.SECONDS);
                    count++;
                }
            }
        } catch (Throwable e) {
            logError("isElementDisplayed  for element error, = " + e.getMessage());
        }
        driver.manage().timeouts().implicitlyWait(waitTime, TimeUnit.SECONDS);
        return elementPresent;
    }*/
    
    /*public boolean isElementDisplayed(By by) {
        boolean elementPresent = true;
        int count = 0;
        int timeout = waitTime;
        driver.manage().timeouts().implicitlyWait(timeout, TimeUnit.SECONDS);
        try {
            while (true) {
                try {
                    if (driver.findElement(by).isDisplayed()) {
                        logMessage("Element is displayed successfully for locator, = " + by);
                        break;
                    } else {
                        if (count == timeout) {
                            elementPresent = false;
                            logError("Element not displayed for locator, = " + by);
                            break;
                        }
                        driver.manage().timeouts().implicitlyWait(timeout, TimeUnit.SECONDS);
                        count++;
                    }
                } catch (Exception ex) {
                    if (count == timeout) {
                        elementPresent = false;
                        logError("Element not displayed for locator, = " + by);
                        break;
                    }
                    driver.manage().timeouts().implicitlyWait(timeout, TimeUnit.SECONDS);
                    count++;
                }
            }
        } catch (Throwable e) {
            logError("isElementDisplayed for locator error, = " + e.getMessage());
        }
        driver.manage().timeouts().implicitlyWait(waitTime, TimeUnit.SECONDS);
        return elementPresent;
    }*/

    
    /*public boolean isElementDisplayed(By by, int timeout) throws InterruptedException {

        boolean elementPresent = true;
        int count = 0;
        driver.manage().timeouts().implicitlyWait(0, TimeUnit.SECONDS);
        while (elementPresent) {
            try {
                if (driver.findElement(by).isDisplayed()) {
                    break;
                } else {
                    if (count == timeout) {
                        elementPresent = false;
                        break;
                    }
                    waitForSeconds(1);
                    count++;
                }
            } catch (Exception ex) {
                if (count == timeout) {
                    elementPresent = false;
                    break;
                }
                waitForSeconds(1);
                count++;
            }
        }
        driver.manage().timeouts().implicitlyWait(timeout, TimeUnit.SECONDS);
        return elementPresent;
    }*/
    //

    /*public boolean isElementDisplayed(By by, int timeout, String pageCtrlName) throws InterruptedException {

        boolean elementPresent = true;
        int count = 0;
        driver.manage().timeouts().implicitlyWait(timeout, TimeUnit.SECONDS);
        while (elementPresent) {
            try {
                if (driver.findElement(by).isDisplayed()) {
                    break;
                } else {
                    if (count == timeout) {
                        elementPresent = false;
                        break;
                    }
                    waitForSeconds(1);
                    count++;
                }
            } catch (Exception ex) {
                if (count == timeout) {
                    elementPresent = false;
                    break;
                }
                waitForSeconds(1);
                count++;
            }
        }
        driver.manage().timeouts().implicitlyWait(timeout, TimeUnit.SECONDS);
        try {
        		if (elementPresent) {
                    logMessage(pageCtrlName + " Element is present, locator = " + by);
                    *//*injectMessageToCucumberReport(pageCtrlName + " Element is present");
                    Allure.step(pageCtrlName + " Element is present ", Status.PASSED);*//*
                } else {
                	logError(pageCtrlName + " Element is not present, locator = " + by);
                    //Allure.step(pageCtrlName + " Element is NOT present ", Status.FAILED);
                }

        } catch (StaleElementReferenceException e) {
            logError("Error Occured inside " + e.getMessage());
            *//*injectWarningMessageToCucumberReport("Failure in isElementDisplayed " + e.getMessage());
            Allure.step(pageCtrlName + " Element is NOT present ", Status.FAILED);*//*
            appendScreenshotToCucumberReport();
        }
        return elementPresent;
    }*/

    /*public boolean isElementDisplayedWithLog(By by, int timeout) {
        boolean isDisplayed;
        try {
            driver.manage().timeouts().implicitlyWait(timeout, TimeUnit.SECONDS);
            WebDriverWait wait = new WebDriverWait(driver, timeout);
            wait.until(ExpectedConditions.visibilityOfElementLocated(by));
            scrollToView(by);
            isDisplayed = driver.findElement(by).isDisplayed();
        } catch (StaleElementReferenceException stle) {
            driver.manage().timeouts().implicitlyWait(timeout, TimeUnit.SECONDS);
            WebDriverWait wait = new WebDriverWait(driver, Integer.valueOf(System.getProperty("EXPLICITWAIT")));
            wait.until(ExpectedConditions.visibilityOfElementLocated(by));
            scrollToView(by);
            isDisplayed = driver.findElement(by).isDisplayed();
        } catch (Exception e) {
            isDisplayed = false;
            logError("isElementDisplayedWithLog, error = " + e.getMessage());
        }
        if (isDisplayed) {
            logMessage("Element displayed successfully");
        } else {
            logError("Element Not displayed successfully");
        }
        return isDisplayed;
    }*/

    public List<WebElement> findElements(By elementBy) throws InterruptedException {
        List<WebElement> lstElements = null;

        if (isElementDisplayed(elementBy)) {
            lstElements = driver.findElements(elementBy);

        } else {


        }
        return lstElements;
    }

    //Writter By C114323
    public void waitForElementToClickable(By by, int timeout) {
        boolean isClickable = false;
        try {
            driver.manage().timeouts()
                    .implicitlyWait(timeout, TimeUnit.SECONDS);
            WebDriverWait wait = new WebDriverWait((WebDriver) driver, timeout);
            wait.until(ExpectedConditions.elementToBeClickable(by));
            isClickable = driver.findElement(by).isDisplayed();

        } catch (StaleElementReferenceException stle) {
            JavascriptExecutor js = (JavascriptExecutor) driver;
            driver.manage().timeouts()
                    .implicitlyWait(timeout, TimeUnit.SECONDS);
            WebDriverWait wait = new WebDriverWait((WebDriver) driver, 10);
            wait.until(ExpectedConditions.elementToBeClickable(by));
            isClickable = driver.findElement(by).isDisplayed();
        } catch (Exception e) {
            isClickable = false;
        }
        driver.manage().timeouts()
                .implicitlyWait(timeout, TimeUnit.SECONDS);

    }


    public String getText(By elementBy) {
        try {
            if (isElementDisplayed(elementBy)) {
                return driver.findElement(elementBy).getText().trim();
            } else {
                return "";
            }
        } catch (Exception e) {
            logError("getText, error = " + e.getMessage());
            return "";
        }
    }

    public void setRelevantWebViewTab() {
        boolean bflag = false;
        changeNativeToWebview();
        try {
            Iterable<String> windowHandles = driver.getWindowHandles();
            for (String windowHandle : windowHandles) {
                driver.switchTo().window(windowHandle);
                if (driver.getTitle().equals("Bank of Ireland") || driver.getTitle().equals("Temenos") || driver.getTitle().contains("Bank of Ireland")) {
                    bflag = true;
                    logMessage("WebView with browser title 'Bank of Ireland' set");
                    appendScreenshotToCucumberReport();
                    break;
                }
            }
            if (!bflag) {
                logError("WebView with browser title 'Bank of Ireland' not found");
                Assert.fail("WebView with browser title 'Bank of Ireland' not found");
            }
        } catch (Throwable e) {
            logError("WebView with browser title 'Bank of Ireland' not found, error = " + e.getMessage());
            Assert.fail("WebView with browser title 'Bank of Ireland' not found");
        }
    }

    public void scrollToView(By locator) {
        try {
            JavascriptExecutor js = (JavascriptExecutor) driver;
            js.executeScript("arguments[0].scrollIntoView();",
                    driver.findElement(locator));
            logMessage("successfully Scrolled to element, locator =  " + locator);
        } catch (Throwable e) {
            logError("Unable to scroll to view");
        }

    }

    public void scrollToView(WebElement element) {
        try {
            JavascriptExecutor js = (JavascriptExecutor) driver;
            js.executeScript("arguments[0].scrollIntoView();",
                    element);
            logMessage("successfully Scrolled to element, webElement =  " + element);
        } catch (Throwable e) {
            logError("Unable to scroll to view");
        }

    }

    //Written By C114323
    public String getTestData(String testDataName) {
        String fileTestData = null;
        fileTestData = System.getProperty(testDataName);
        return fileTestData;
    }

    public AppiumDriver getAppiumDriver() {
        return appiumDriver;
    }

    // Written by C113329
    public void selectValueFromDropDown(By locator, String value) {
        try {
            List<WebElement> allOptions = driver.findElements(locator);
            for (int option = 0; option <= allOptions.size() - 1; option++) {
                if (allOptions.get(option).getText().toUpperCase().contains(value)) {
                    allOptions.get(option).click();
                    break;
                }
            }
        } catch (Exception e) {
            logError("Error Occured inside selectValueFromDropDown " + e.getMessage());
            injectWarningMessageToCucumberReport("Failure in select value from drop down " + e.getMessage());
            Allure.step("Select value from drop down NOT Successfully ", Status.FAILED);
            appendScreenshotToCucumberReport();

        }
    }


    public void changeNativeToWebview() {
        try {
            Set<String> availableContexts = getContextHandles();
            logMessage("Total No of Context Found After we reach to WebView = " + availableContexts.size());
            logMessage("Total No of Available context = " + availableContexts);
            for (String context : availableContexts) {
            
                if(driver.toString().contains("IOS")){
                    if(System.getProperty("PLATFORM").equalsIgnoreCase("BROWSERSTACK")){
                        context("NATIVE_APP");
                        Set handles = getAppiumDriver().getContextHandles();
                        ArrayList<String> listContext= new ArrayList<>(handles);
                        logMessage("Available context in Browserstack platform , "+listContext.toString());
                        if(listContext.get(1).contains(CONTEXTVIEW2)){
                            logMessage("Context Name is " + listContext.get(1));
                            context(listContext.get(1));
                            break;
                        }
                    }else {
                        if(context.contains(CONTEXTVIEW2)){
                            logMessage("Context Name is " + context);
                            context(context);
                            break;
                        }
                    }

                }else{
                    //if (context.equalsIgnoreCase(CONTEXTVIEW1) || context.equalsIgnoreCase(CONTEXTVIEW3)) {
                    if (context.equalsIgnoreCase("WEBVIEW_"+System.getProperty("APPPACKAGENAME"))) {
                    logMessage("Context Name is " + context);
                    context(context);
                    break;
                    }
                }
                if (context.contains(CONTEXTVIEW1) || context.contains(CONTEXTVIEW3) || context.contains(CONTEXTVIEW2)) {
                    logMessage("Context Name is " + context);
                    context(context);
                    break;
                }
            }
        } catch (Throwable e) {
            logError("changeNativeToWebview, error =" + e.getMessage());
        }
    }

//    public void changeNativeToWebview() {
//		try {
//			Set<String> availableContexts = getContextHandles();
//			logMessage("Total No of Context Found After we reach to WebView = " + availableContexts.toString()
//					+ availableContexts.size());
//			for (String context : availableContexts) {
//				if (context.contains(CONTEXTVIEW1) || context.contains(CONTEXTVIEW2)
//						|| context.contains(CONTEXTVIEW3)) {
//					logMessage("Context Name is " + context);
//					context(context);
//					break;
//				}
//			}
//		} catch (Throwable e) {
//			logError("changeNativeToWebview, error =" + e.getMessage());
//		}
//	}
    /**
     * Method to click element using Java script
     *
     * @param locator
     * @param alt     Name
     * @throws Exception
     */
	/*public void clickJS(By locator, String alt) throws InterruptedException {

    		        boolean blnClicked = false;
    		        JavascriptExecutor js = (JavascriptExecutor) driver..getWebDriver();
    		        js.executeScript("arguments[0].scrollIntoView();",
    		                driver.findElement(locator));

    		        if (isElementDisplayed(locator, waitTime)) {
    		            try {
    		                WebElement element = driver.findElement(locator);
    		                JavascriptExecutor executor = (JavascriptExecutor) driver.getWebDriver();
    		                executor.executeScript("arguments[0].click();", element);
    		            } catch (UnreachableBrowserException e) {
    		                e.printStackTrace();
    		            } catch (StaleElementReferenceException e) {
    		                e.printStackTrace();
    		            }
    		            blnClicked = true;
    		        }
//    		        waitForPageLoaded();
//    		        waitForJQueryLoad();
    		        try {
    		            if (blnClicked) {
//    		                report.updateTestLog("Click <b>" + alt + "</b>", "<b>" + alt
//    		                        + "</b> button clicked", Status_CRAFT.PASS);
    		            } else {
//    		                report.updateTestLog("Click <b>" + alt + "</b>",
//    		                        "Unable to click on <b>" + alt + "</b>", Status_CRAFT.FAIL);
    		            }
    		        } catch (StaleElementReferenceException e) {
    		            e.printStackTrace();
    		        }
    		    }



	 */

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings({"unchecked", "rawtypes"})
    public List<WebElement> findElementsByName(String arg0) {
        return getAppiumDriver().findElementsByName(arg0);
    }

    /**
     * Function Applicable only when the tool used is <b>PERFECTO i.e.,
     * {@link 'IMobileWebDriver} OR <b>APPIUM i.e., {@link AppiumDriver} OR
     * <b>SEETEST i.e., {@link 'MobileWebDriver}.
     */
    @SuppressWarnings("rawtypes")
    public WebElement findElementByXPath(String arg0) {
        return getAppiumDriver().findElementByXPath(arg0);

    }


    /**
     * Function Applicable only when the tool used is <b>PERFECTO i.e.,
     * {@link 'IMobileWebDriver} OR <b>APPIUM i.e., {@link AppiumDriver} OR
     * <b>SEETEST i.e., {@link 'MobileWebDriver}.
     */
    @SuppressWarnings({"unchecked", "rawtypes"})
    public List<WebElement> findElementsByLinkText(String arg0) {
        return getAppiumDriver().findElementsByLinkText(arg0);
    }

    /**
     * Function Applicable only when the tool used is <b>PERFECTO i.e.,
     * {@link 'IMobileWebDriver} OR <b>APPIUM i.e., {@link AppiumDriver} OR
     * <b>SEETEST i.e., {@link 'MobileWebDriver}.
     */
    @SuppressWarnings("rawtypes")
    public WebElement findElementByPartialLinkText(String arg0) {
        return getAppiumDriver().findElementByPartialLinkText(arg0);
    }

    /**
     * Function Applicable only when the tool used is <b>PERFECTO i.e.,
     * {@link 'IMobileWebDriver} OR <b>APPIUM i.e., {@link AppiumDriver} OR
     * <b>SEETEST i.e., {@link 'MobileWebDriver}.
     */
    @SuppressWarnings({"unchecked", "rawtypes"})
    public List<WebElement> findElementsByPartialLinkText(String arg0) {
        return getAppiumDriver().findElementsByPartialLinkText(arg0);
    }


    /**
     * Function Applicable only when the tool used is <b>PERFECTO i.e.,
     * {@link 'IMobileWebDriver} OR <b>APPIUM i.e., {@link AppiumDriver} OR
     * <b>SEETEST i.e., {@link 'MobileWebDriver}.
     */
    @SuppressWarnings({"unchecked", "rawtypes"})
    public List<WebElement> findElementsByClassName(String arg0) {
        return getAppiumDriver().findElementsByClassName(arg0);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public WebElement findElementByTagName(String arg0) {
        return getAppiumDriver().findElementByTagName(arg0);

    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings({"rawtypes", "unchecked"})
    public List<WebElement> findElementsByTagName(String arg0) {
        return getAppiumDriver().findElementsByTagName(arg0);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public WebElement findElementByCssSelector(String arg0) {
        return getAppiumDriver().findElementByCssSelector(arg0);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings({"unchecked", "rawtypes"})
    public List<WebElement> findElementsByCssSelector(String arg0) {
        return getAppiumDriver().findElementsByCssSelector(arg0);

    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public Capabilities getCapabilities() {
        return getAppiumDriver().getCapabilities();
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public CommandExecutor getCommandExecutor() {
        return getAppiumDriver().getCommandExecutor();
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public ErrorHandler getErrorHandler() {
        return getAppiumDriver().getErrorHandler();
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public ExecuteMethod getExecuteMethod() {
        return getAppiumDriver().getExecuteMethod();
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public FileDetector getFileDetector() {
        return getAppiumDriver().getFileDetector();
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public Keyboard getKeyboard() {
        return getAppiumDriver().getKeyboard();
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings({"rawtypes", "deprecation"})
    public Mouse getMouse() {
        return getAppiumDriver().getMouse();
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings({"rawtypes", "unchecked"})
    public Response execute(String driverCommand, Map<String, ?> parameters) {
        return getAppiumDriver().execute(driverCommand, parameters);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public void performMultiTouchAction(MultiTouchAction arg0) {
        getAppiumDriver().performMultiTouchAction(arg0);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public TouchAction performTouchAction(TouchAction arg0) {
        return getAppiumDriver().performTouchAction(arg0);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public String getContext() {
        return getAppiumDriver().getContext();
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings({"rawtypes", "unchecked"})
    public Set<String> getContextHandles() {
        return getAppiumDriver().getContextHandles();
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public ScreenOrientation getOrientation() {
        return getAppiumDriver().getOrientation();
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public URL getRemoteAddress() {
        return getAppiumDriver().getRemoteAddress();
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public SessionId getSessionId() {
        return getAppiumDriver().getSessionId();
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public void rotate(ScreenOrientation arg0) {
        getAppiumDriver().rotate(arg0);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings({"rawtypes", "unchecked"})
    public List<WebElement> findElementsByAccessibilityId(String arg0) {

        return getAppiumDriver().findElementsByAccessibilityId(arg0);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public Location location() {
        return getAppiumDriver().location();
    }

    // public int lockScreen(int seconds){
    // return getAppiumDriver().lockScreen(seconds);
    // }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public void setLocation(Location arg0) {
        getAppiumDriver().setLocation(arg0);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public void hideKeyboard() {
        getAppiumDriver().hideKeyboard();
    }


    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public void setErrorHandler(ErrorHandler handler) {
        getAppiumDriver().setErrorHandler(handler);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public void setFileDetector(FileDetector detector) {
        getAppiumDriver().setFileDetector(detector);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public void setLogLevel(Level level) {
        getAppiumDriver().setLogLevel(level);
    }


    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public byte[] pullFile(String remotePath) {
        return getAppiumDriver().pullFile(remotePath);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public byte[] pullFolder(String remotePath) {
        return getAppiumDriver().pullFolder(remotePath);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public void closeApp() {
        getAppiumDriver().closeApp();
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public void installApp(String appPath) {
        getAppiumDriver().installApp(appPath);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public boolean isAppInstalled(String bundleId) {
        return getAppiumDriver().isAppInstalled(bundleId);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public void launchApp() {
        getAppiumDriver().launchApp();
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public void removeApp(String bundleId) {
        getAppiumDriver().removeApp(bundleId);
    }

    /**
     * Function Applicable only when the tool used is <b>APPIUM i.e.,
     * {@link AppiumDriver}.
     */
    @SuppressWarnings("rawtypes")
    public void resetApp() {
        getAppiumDriver().resetApp();
    }

    public boolean explicitWaitForVisibilityOfElement(By by) {
        boolean flag;
        try {
            wait.until(ExpectedConditions.visibilityOfElementLocated(by));
            flag = true;
        } catch (Exception e) {
            flag = false;
            //logError("Element, "+by.toString()+" is not visible , Error = "+e.getMessage());
        }
        return flag;
    }

    public boolean fluentWaitCondition(By locatorValue) {
        boolean flag = false;
        Wait<WebDriver> wait = new FluentWait<WebDriver>(driver)
                .withTimeout(Duration.ofSeconds(15))
                .pollingEvery(Duration.ofSeconds(2))
                .ignoring(NoSuchElementException.class);

        WebElement element;
        try {
            element = wait.until(new Function<WebDriver, WebElement>() {
                @Override
                public WebElement apply(WebDriver webDriver) {
                    return driver.findElement(locatorValue);
                }
            });
            if (element.isDisplayed()) {
                flag = true;
            }

        } catch (Exception e) {
            flag = false;
            logWarning("Fluent wait condition is 'false', Message =" + e.getMessage());
        }

        return flag;
    }

    public WebElement waitForVisibilityOfElement(By by) {
        WebElement element = null;
        try {
            element = wait.until(ExpectedConditions.visibilityOfElementLocated(by));
        } catch (Exception e) {
            logError("Element, " + by.toString() + " is not visible , Error = " + e.getMessage());
        }
        return element;
    }

    public boolean explicitWaitForElementTobeClickable(By by) {
        boolean flag;
        try {
            wait.until(ExpectedConditions.elementToBeClickable(by));
            flag = true;
        } catch (Exception e) {
            flag = false;
            //logError("Element, "+by.toString()+" is not displayed , Error = "+e.getMessage());
        }
        return flag;
    }

    public void sendKey(By locator, String valuetoType) throws InterruptedException {
        if (isElementDisplayed(locator)) {
            try {
                driver.findElement(locator).clear();
                driver.findElement(locator).sendKeys(valuetoType);
                logMessage("Entered the value , = " + valuetoType);
            } catch (StaleElementReferenceException e) {
                logError("Stalelement exception, error = " + e.getMessage());
                driver.findElement(locator).clear();
                driver.findElement(locator).sendKeys(valuetoType);
                logMessage("Entered the value , = " + valuetoType);
            }
        } else {
            JavascriptExecutor js = (JavascriptExecutor) driver;
            js.executeScript("arguments[0].value=arguments[1];",
                    driver.findElement(locator), valuetoType);
            logMessage("Entered the value using javascript , value  = " + valuetoType);
        }
    }

    public void changeWebViewToNative() {
        try {
            Set<String> Contexts = getContextHandles();
            for (String context : Contexts) {
                if (context.contains("NATIVE")) {
                    logMessage("Context name is " + context);
                    context(context);
                    break;
                }
            }
        } catch (Exception e) {
            logError("changeWebviewToNative, error =" + e.getMessage());
        }
    }
public void sendKeysJS(By locator, String valuetoType) throws InterruptedException {
		boolean blnTextEntered = false;

		if (isElementDisplayed(locator, 5)) {
			try {
				JavascriptExecutor js = (JavascriptExecutor) driver;
				WebElement inputField = driver.findElement(locator);
				js.executeScript("arguments[0].setAttribute('value', '" + valuetoType + "')", inputField);
				blnTextEntered = true;
			} catch (StaleElementReferenceException e) {
				e.printStackTrace();
				driver.findElement(locator).sendKeys(valuetoType);
				blnTextEntered = true;
			}
		}
		if (blnTextEntered) {
			logMessage("Entered value = "+valuetoType);
		} else {
			logError("Unable to enter value = " +valuetoType);
		}

	}
  
	public void ScrollAndClickJS(String linkToClick) throws InterruptedException {
		try {
			JavascriptExecutor js = (JavascriptExecutor) driver;
			js.executeScript("arguments[0].scrollIntoView();", driver.findElement(getObject((linkToClick))));
			waitForSeconds(2);
			//report.updateTestLog("ScrollAndClickJS", "Element To Click", Status_CRAFT.DONE);
			JavascriptExecutor executor = (JavascriptExecutor) driver;
			executor.executeScript("arguments[0].click();", driver.findElement(getObject((linkToClick))));
			waitForSeconds(3);
		} catch (UnreachableBrowserException e) {
			e.printStackTrace();
		} catch (StaleElementReferenceException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * This will scroll till element and click on that
	 */
	//Written by C114323 - 19/07/2021
	public void ScrollAndClickJS(WebElement linkToClick) throws InterruptedException {
	    try {
	        JavascriptExecutor js = (JavascriptExecutor) driver;
	        js.executeScript("arguments[0].scrollIntoView(false);", linkToClick);
	        waitForSeconds(2);
	        JavascriptExecutor executor = (JavascriptExecutor) driver;
	        executor.executeScript("arguments[0].click();", linkToClick);
	        waitForSeconds(3);
	    } catch (UnreachableBrowserException e) {
	        e.printStackTrace();
	    } catch (StaleElementReferenceException e) {
	        e.printStackTrace();
	    }
	}

    public void updateReportStatus(String stepName, String stepDescription , String stepStatus, String screenShotFlag){
        switch (screenShotFlag.toUpperCase()){
            case "YES":
                appendScreenshotToCucumberReport();
                break;
            case "NO":
                break;
        }

        switch (stepStatus.toUpperCase()){
            case "PASSED":
                logMessage(stepDescription + " in " +stepName);
                /*insertMessageToHtmlReport(stepDescription + " in " +stepName);*/
                insertMessageToHtmlReport(stepDescription);
                break;
            case "FAILED":
                logError(stepDescription + " in " +stepName);
                /*insertErrorMessageToHtmlReport(stepDescription + " in " +stepName);*/
                insertErrorMessageToHtmlReport(stepDescription);
                Assert.fail("Error Occurred inside "+ stepName+" for "+stepDescription);
                break;
            case "ERROR":
                logError("Error Occured inside "+ stepName+" for "+stepDescription);
//             insertErrorMessageToHtmlReport("Error Occured inside "+ stepName+" for "+stepDescription);
                insertErrorMessageToHtmlReport(stepDescription);
                Assert.fail("Error Occurred inside "+ stepName+" for "+stepDescription);
                break;
            case "WARNING":
                logWarning("Warning Occurred inside "+ stepName+" for "+stepDescription);
//			insertWarningMessageToHtmlReport("Warning Occured inside "+ stepName+" for "+stepDescription);
                insertWarningMessageToHtmlReport("Warning Occurred for stepDescription = "+stepDescription);
                break;
        }


    }

    public boolean isElementDisplayed(WebElement element) {
        boolean elementPresent = false;
        try {
            wait.until(ExpectedConditions.visibilityOf(element));

            if(element.isDisplayed()==true){
                elementPresent=true;
            }

        } catch (Exception e) {
            elementPresent = false;
        }
        return elementPresent;

    }

    public boolean isElementDisplayed(By by) {
        boolean elementPresent = false;
        try {
            wait.until(ExpectedConditions.visibilityOfElementLocated(by));

            if(driver.findElements(by).size()>=1){
                elementPresent=true;
            }

        } catch (Exception e) {
            elementPresent = false;
        }
        return elementPresent;
    }


    public boolean isElementDisplayed(By by, int timeout) throws InterruptedException {

        boolean elementPresent = false;
        try {
            wait.until(ExpectedConditions.visibilityOfElementLocated(by));

            if(driver.findElements(by).size()>=1){
                elementPresent=true;
            }

        } catch (Exception e) {
            elementPresent = false;
        }
        return elementPresent;
    }
    //

    public boolean isElementDisplayed(By by, int timeout, String pageCtrlName) throws InterruptedException {

        boolean elementPresent = false;
        try {
            wait.until(ExpectedConditions.visibilityOfElementLocated(by));
            if(driver.findElements(by).size()>=1){
                elementPresent=true;
            }
        } catch (Exception e) {
            elementPresent = false;
        }
        return elementPresent;

    }

    public boolean isElementDisplayedWithLog(By by, int timeout) {
        boolean elementPresent = false;
        try {
            wait.until(ExpectedConditions.visibilityOfElementLocated(by));
            if(driver.findElements(by).size()>=1){
                elementPresent=true;
            }
        } catch (Exception e) {
            elementPresent = false;
        }
        return elementPresent;    }

}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&TESTEEE&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

package com.boi.grp.pageobjects.Services;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.PageFactory;

import com.boi.grp.pageobjects.BasePageForAllPlatform;

import io.appium.java_client.android.AndroidDriver;

/**
 * Created by C112083 on 07/05/2021.
 */
public class LaunchService extends BasePageForAllPlatform {

	public LaunchService(WebDriver driver) {
		super(driver);
		PageFactory.initElements(driver, this);
		if (!driver.toString().contains("appium")) {
			driver.manage().window().maximize();
		}
	}

	public void invoke() {
		try {
			switch (System.getProperty("TYPE").trim().toUpperCase()) {
			case "BROWSER":
				if (driver.toString().contains("appium")) {
					String strAppUrl;
					switch (System.getProperty("PREFERRED_BROWSER").toUpperCase()) {
					case "SAFARI":
						strAppUrl = System.getProperty("URL").trim();
						driver.get(strAppUrl);
						break;
					case "CHROME":
						AndroidDriver androidDriver = (AndroidDriver) driver;
						androidDriver.context("CHROMIUM");
						strAppUrl = System.getProperty("URL").trim();
						driver.get(strAppUrl);
						break;
					}
				} else {
					String strAppUrl = System.getProperty("DESKTOP_URL").trim();
					driver.get(strAppUrl);
					if (System.getProperty("PREFERRED_BROWSER").equalsIgnoreCase("IE")) {
						clickJS(getObjectBy("advanceIE"));
						logMessage("InvokeChannelApplication: Advance link is clicked ");
						waitForPageLoaded();
					}
				}
				System.setProperty("RUNTYPE", "NONMOBILEAPP");
				break;
			case "MOBILEBROWSER":
				if (driver.toString().contains("appium")) {
					String strAppUrl;
					switch (System.getProperty("PREFERRED_BROWSER").toUpperCase()) {
					case "SAFARI":
						strAppUrl = System.getProperty("MOBILE_URL").trim();
						driver.get(strAppUrl);
						break;
					case "CHROME":
						AndroidDriver androidDriver = (AndroidDriver) driver;
						androidDriver.context("CHROMIUM");
						strAppUrl = System.getProperty("MOBILE_URL").trim();
						driver.get(strAppUrl);
						break;
					}
				} /*else {
					String strAppUrl = System.getProperty("DESKTOP_URL").trim();
					driver.get(strAppUrl);
					if (System.getProperty("PREFERRED_BROWSER").equalsIgnoreCase("IE")) {
						clickJS(getObjectBy("advanceIE"));
						logMessage("InvokeChannelApplication: Advance link is clicked ");
						waitForPageLoaded();
					}
				}*/
				System.setProperty("RUNTYPE", "NONMOBILEAPP");
				break;
			case "APPLICATION":
				setRelevantWebViewTab();
				waitForPageLoaded();
				System.setProperty("RUNTYPE", "MOBILEAPP");
				break;
			
			}

		} catch (Throwable e) {
			logError("Error in invoking method, Error = " + e.getMessage());
		}
	}
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&TEST########

package com.boi.grp.runners;

import org.junit.runner.RunWith;

import io.cucumber.junit.Cucumber;
import io.cucumber.junit.CucumberOptions;

@RunWith(Cucumber.class)
@CucumberOptions(features = { "src/test/resources/FinalFeatures/UXP_Banking_365" },
		// features = {"src/test/java/com/boi/grp/initialfeatures"},
		plugin = { "pretty", "json:target/cucumber-parallel/cucumber.json",
				"junit:target/cucumber-parallel/cucumber.xml", "html:target/cucumber-parallel",
				"rerun:target/cucumber-parallel/rerun.txt" }, dryRun = false, tags = { "@CHEQUESEARCH" }, glue = { "com.boi" })
public class junitRunner {
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&TESTEE&&&&&&&&&&&&&&&&&&&&&&&&&
package com.boi.grp.utilities;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import org.apache.commons.dbutils.BasicRowProcessor;
import org.apache.log4j.Logger;

import com.google.common.base.Joiner;
import com.google.common.collect.Lists;

/**
 * Created by C112083 on 02/12/2020.
 */
public class DBUtilities {
	private static DBUtilities instance;
	private Connection connection = null;
	public Logger logman;
	private Statement statement;
	private static final int ROW_MAX_LENGTH = 100;
	private static final String COL_DELIM = "|";
	private static final String CSV_COL_DELIM = "\t,";

	private DBUtilities(String url, String userName, String password) {
		logman = LogManager.getInstance();
		try {
			switch (System.getProperty("DB_TYPE").toUpperCase()) {
			case "ORACLE":
				Class.forName("oracle.jdbc.driver.OracleDriver");
				break;
			case "MYSQL":
				//
				break;
			case "TERADATA":
				Class.forName("com.teradata.jdbc.TeraDriver");
				break;

			}
			connection = DriverManager.getConnection(url, userName, password);
			statement = connection.createStatement();
		} catch (Exception e) {
			logman.error("Error in loading class for DBUtilities = " + System.getProperty("DB_TYPE"));
		}
	}

	public static DBUtilities getInstance() {
		if (instance == null) {
			instance = new DBUtilities("", "", "");
		} else
			try {
				if (instance.getConnection().isClosed()) {
					instance = new DBUtilities("", "", "");
				}
			} catch (SQLException e) {
				System.out.println("Error in connection , Error = " + e.getMessage());
			}
		return instance;
	}

	public Connection getConnection() {
		return connection;
	}

	public String runSqlQuery(String sqlQuery) throws SQLException {
		String result = "";
		try {
			ResultSet resultData = runSqlQueryToSet(sqlQuery);
			result = Joiner.on("\n").join(asMaps(resultData));
			logman.debug("Result of query = " + sqlQuery + " is = " + result);
		} catch (SQLException e) {
			logman.error("Execution of query = " + sqlQuery + " is failed , Error = " + e.getMessage());
		}
		return result;
	}

	// get resultset
	public ResultSet runSqlQueryToSet(String sqlQuery) throws SQLException {
		ResultSet resultData = null;
		try {
			Statement statement = connection.createStatement();
			logman.info("Running query {} on database {}, query = " + sqlQuery);
			resultData = statement.executeQuery(sqlQuery);
		} catch (SQLException e) {
			logman.error("Error in getting ResulSet, Error = " + e.getMessage());
		}
		return resultData;
	}

	public List<Map<String, Object>> resultSetToArrayList(ResultSet rs) throws SQLException {
		try {
			List<Map<String, Object>> list = null;
			ResultSetMetaData md = rs.getMetaData();
			int columns = md.getColumnCount();
			list = new ArrayList<Map<String, Object>>();
			while (rs.next()) {
				Map<String, Object> row = new HashMap<String, Object>(columns);
				for (int i = 1; i <= columns; ++i) {
					row.put(md.getColumnName(i), rs.getObject(i));
				}
				list.add(row);
			}
			return list;
		} catch (SQLException e) {
			logman.error("Error in adding data on Method resultSetToArrayList, Message = " + e.getMessage());
		}
		logman.error("Data not added in the form of List of Map in Method resultSetToArrayList");
		return null;
	}

	private List<Map<String, String>> asMaps1(ResultSet queryData) throws SQLException {
		List<Map<String, Object>> result = null;
		try {
			BasicRowProcessor processor = new BasicRowProcessor();
			result = new ArrayList<Map<String, Object>>();
			while (queryData.next()) {
				Map<String, Object> res = processor.toMap(queryData);
				result.add(res);
			}
		} catch (SQLException e) {
			logman.error("Error in converting ResultSet to list of map of type String, Error = " + e.getMessage());
		}
		return toStringMap(result);
	}

	private List<Map<String, String>> toStringMap(List<Map<String, Object>> m) {
		List<Map<String, String>> res = new ArrayList<Map<String, String>>();
		try {
			for (Map<String, Object> row : m) {
				Map<String, String> copy = row.entrySet().stream()
						.collect(Collectors.toMap(Map.Entry::getKey, e -> String.valueOf(e.getValue())));
				res.add(copy);
			}
		} catch (Exception e) {
			logman.error("Error in converting list of map of type Object to list of map of type String, Error = "
					+ e.getMessage());
		}
		return res;
	}

	public List<Map<String, Object>> asMaps(ResultSet queryData) throws SQLException {
		BasicRowProcessor processor = new BasicRowProcessor();
		List<Map<String, Object>> result = Lists.newArrayList();
		while (queryData.next()) {
			Map<String, Object> res = processor.toMap(queryData);
			result.add(res);
		}
		return result;
	}

	public void runUpdateQueryImpl(String sql) {
		try {
			logman.info("SQL Query : " + sql);
			statement.executeUpdate(sql);
			connection.close();
		} catch (Exception e) {
			logman.error("Error running query: \n" + sql + "\n Error , = " + e.getMessage());
		}
	}

	public void runBulkUpdateQueryImpl(List<String> sql) {
		try {
			for (String query : sql) {
				statement.addBatch(query);
			}
			statement.executeBatch();
			statement.close();
			connection.close();
			logman.info("Bulk update is successful");
		} catch (SQLException e) {
			logman.error("Error running query: \n" + sql + "\n" + e);
		}
	}

	private List<Integer> findLength(List<Map<String, String>> table) {
		List<Integer> maxLengths = new ArrayList<Integer>();
		try {
			for (String key : table.get(0).keySet()) {
				int len = key.length();
				if (len > ROW_MAX_LENGTH) {
					len = ROW_MAX_LENGTH;
				}
				maxLengths.add(len);
			}
			int cnt = 0;
			for (Map<String, String> row : table) {
				cnt = 0;
				for (String value : row.values()) {
					Integer curr = maxLengths.get(cnt);
					if (curr == ROW_MAX_LENGTH) {
						continue;
					}
					int len = value.length();
					if (len > ROW_MAX_LENGTH) {
						maxLengths.set(cnt, ROW_MAX_LENGTH);
					} else if (len > curr) {
						maxLengths.set(cnt, len);
					}
					cnt++;
				}
			}
		} catch (Exception e) {
			logman.error("Error in finding length, Error = " + e.getMessage());
		}
		return maxLengths;
	}

	private String createTable(List<Map<String, String>> table) {
		try {
			if (table.isEmpty() || table.get(0).isEmpty()) {
				return "";
			}
			List<Integer> maxLengths = findLength(table);
			StringBuilder sb = new StringBuilder();
			String tableHeaders = createRow(maxLengths, new ArrayList<Object>(table.get(0).keySet()));
			sb.append(tableHeaders);
			for (Map<String, String> row : table) {
				sb.append(createRow(maxLengths, new ArrayList<Object>(row.values())));
			}
			logman.debug("data = " + sb.toString());
			return sb.toString();
		} catch (Exception e) {
			logman.error("Error in Creating table, Error = " + e.getMessage());
			return "";
		}
	}

	private String createRow(List<Integer> colMaxLengths, List<Object> elements) {
		try {
			StringBuilder res = new StringBuilder();
			res.append(COL_DELIM);
			for (int i = 0; i < elements.size(); i++) {
				String val = elements.get(i).toString();
				if (val.length() > colMaxLengths.get(i)) {
					val = val.substring(0, colMaxLengths.get(i) - 2) + "...";
					res.append(val);
				} else {
					res.append(val);
					res.append(getSpaces(colMaxLengths.get(i) - val.length()));
				}
				res.append(COL_DELIM);
			}
			logman.debug("Create Row data = " + res.toString());
			res.append("\n");
			return res.toString();
		} catch (Exception e) {
			logman.error("Error in Creating row, Error = " + e.getMessage());
			return "";
		}
	}

	private String createRow(List<Integer> colMaxLengths, List<Object> elements, String delim) {
		try {
			StringBuilder res = new StringBuilder();
			// res.append(delim);
			for (int i = 0; i < elements.size(); i++) {
				String val = elements.get(i).toString();
				if (val.length() > colMaxLengths.get(i)) {
					val = val.substring(0, colMaxLengths.get(i) - 2) + "...";
					res.append(val);
				} else {
					res.append(val);
					res.append(getSpaces(colMaxLengths.get(i) - val.length()));
				}
				res.append(delim);
			}
			res.append("\n");
			logman.debug("Create Row data with delimiter = " + res.toString());
			return res.toString();
		} catch (Exception e) {
			logman.error("Error in Creating row, Error = " + e.getMessage());
			return "";
		}
	}

	private String getSpaces(int len) {
		StringBuilder spaces = new StringBuilder();
		try {
			for (int i = 0; i <= len; i++) {
				spaces.append(" ");
			}
		} catch (Exception e) {
			logman.error("Error in getSpaces, Error = " + e.getMessage());
		}
		return spaces.toString();
	}

	private void close(Connection conn) {
		if (conn != null) {
			try {
				conn.close();
			} catch (SQLException e) {
				logman.error("Error closing db connection! , Error = " + e.getMessage());
			}
		}
	}

	private void close(Statement stat) {
		if (stat != null) {
			try {
				stat.close();
			} catch (SQLException e) {
				logman.error("Error closing statement! , Error = " + e.getMessage());
			}
		}
	}

	private void close(ResultSet rs) {
		if (rs != null) {
			try {
				rs.close();
			} catch (SQLException e) {
				logman.error("Error closing ResultSet! , Error = " + e.getMessage());
			}
		}
	}

	public String createCSVTable(List<Map<String, String>> table) {
		try {
			if (table.isEmpty() || table.get(0).isEmpty()) {
				return "";
			}
			List<Integer> maxLengths = findLength(table);
			String tableHeaders = createRow(maxLengths, new ArrayList<Object>(table.get(0).keySet()), CSV_COL_DELIM);
			StringBuilder sb = new StringBuilder();
			sb.append(tableHeaders);
			for (Map<String, String> row : table) {
				sb.append(createRow(maxLengths, new ArrayList<Object>(row.values()), CSV_COL_DELIM));
			}
			logman.debug("Data for Create csv table = " + sb.toString());
			return sb.toString();
		} catch (Exception e) {
			logman.error("Error in creating CSV table, Error = " + e.getMessage());
			return "";
		}
	}

}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&TESTEE&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

package com.boi.grp.utilities;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.log4j.Logger;

/**
 * Created by C112083 on 13/10/2020.
 */
public class FileUtilities {
	Logger logMan;

	public FileUtilities() {
		logMan = LogManager.getInstance();
	}

	public void GenerateConsolidatedFailuresList() {
		logMan.info("GenerateConsolidatedFailuresList Function - Start");
		try {
			File[] files = new File(System.getProperty("user.dir") + "\\target\\Failures\\").listFiles();
			for (File file : files) {
				if (file.isDirectory()) {
					File tempFile = new File(file.getAbsolutePath() + "\\Failure.txt");
					String ValueInFailure = ReadFromTextFile(tempFile);
					if (!(ValueInFailure == null)) {
						WriteToFinalFailureLog(ValueInFailure);
					}

				} else {
					System.out.println("File: " + file.getName());
					logMan.info("Info - " + "File: " + file.getName());
				}
			}

		} catch (Throwable t) {
			System.out.println("Error Occured inside the GenerateConsolidatedFailuresList function, Error Message ="
					+ t.getMessage());
			logMan.error("Error Occured inside the GenerateConsolidatedFailuresList function, Error Message ="
					+ t.getMessage());
		}
		logMan.info("GenerateConsolidatedFailuresList Function - End");
	}

	public String ReadFromTextFile(File file) {
		String returvalue = "";
		logMan.info("ReadFromTextFile Function - Start");
		try {
			FileReader Fr;
			BufferedReader Br;
			Fr = new FileReader(file);
			Br = new BufferedReader(Fr);
			String FailureString = Br.readLine();
			Br.close();
			returvalue = FailureString;
		} catch (Throwable t) {
			System.out.println("Error Occured Reading file, in function ReadFromTextFile " + t.getMessage());
			logMan.error("Error Occured Reading file, in function ReadFromTextFile " + t.getMessage());
			// return "";
		}
		logMan.info("ReadFromTextFile Function - END");
		return returvalue;
	}

	public void WriteToFinalFailureLog(String FailureData) {
		logMan.info("WriteToFinalFailureLog Function - Start");
		try {
			if (!(FailureData == "")) {
				Boolean NeedSeparator = true;
				File file = new File(
						System.getProperty("user.dir") + "\\target\\Failures\\ConsolidatedFailuresList.txt");
				if (!file.exists()) {
					file.createNewFile();
					NeedSeparator = false;
				}
				FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
				BufferedWriter bw = new BufferedWriter(fw);
				if (NeedSeparator == true) {
					bw.write(" ");
				}
				bw.write(FailureData);
				bw.flush();
				bw.close();
			}
		} catch (IOException e) {
			System.out.println("Error Occured in WriteToFinalFailureLog function");
			logMan.error("Error Occured in WriteToFinalFailureLog function");
			e.printStackTrace();
		}
		logMan.info("WriteToFinalFailureLog Function - End");
	}

	public boolean FileExists(String path) {
		logMan.info("FileExists Function - Start");
		boolean returnvalue = false;
		try {
			File f = new File(path);
			if (f.exists()) {
				returnvalue = true;
			}
		} catch (Throwable t) {
			System.out.println("Error occured in FileExists , file path= " + path + " ,Error Desc = " + t.getMessage());
			logMan.error("Error occured in FileExists , file path= " + path + " ,Error Desc = " + t.getMessage());
			// returnvalue= false;
		}
		logMan.info("FileExists Function - END");
		return returnvalue;
	}

	public boolean Deletefile(String path) {
		logMan.info("Deletefile Function - Start");
		boolean returnvalue = false;
		try {
			File f = new File(path);
			if (f.exists()) {
				f.delete();
				returnvalue = true;
			}
		} catch (Throwable t) {
			System.out.println("Error occured in Deletefile , file path= " + path + " ,Error Desc = " + t.getMessage());
			logMan.error("Error occured in Deletefile , file path= " + path + " ,Error Desc = " + t.getMessage());
		}
		logMan.info("Deletefile Function - END");
		return returnvalue;
	}

	public void DeleteFailedJsonFiles(String ConsolidatedFailureListdocumentPath) {
		logMan.info("DeleteFailedJsonFiles Function - Start");
		try {
			FileUtilities fileUtil = new FileUtilities();
			String AllFailures;
			AllFailures = fileUtil
					.ReadFromTextFile(new File(System.getProperty("user.dir") + ConsolidatedFailureListdocumentPath));
			System.out.println(AllFailures);
			String[] FailureArray = AllFailures.split(" ");
			System.out.println(FailureArray.length);
			for (int FailureStringNo = 0; FailureStringNo < FailureArray.length; FailureStringNo++) {
				String IndividualFailurestring = FailureArray[FailureStringNo];
				System.out.println(IndividualFailurestring);
				logMan.info(IndividualFailurestring);
				String[] IndividualFailuresArray = IndividualFailurestring.split("/");
				String FailedScenarioData = IndividualFailuresArray[IndividualFailuresArray.length - 1];
				System.out.println("FailedScenarioData =" + FailedScenarioData);
				logMan.info("FailedScenarioData =" + FailedScenarioData);
				String[] FailedScenarioDataArray = FailedScenarioData.split(":");
				String ExactFailedScenario = FailedScenarioDataArray[0].replace(".feature", "");
				System.out.println(ExactFailedScenario);
				logMan.info(ExactFailedScenario);
				String JsonReportPath = System.getProperty("user.dir") + "\\target\\JSONReports\\" + ExactFailedScenario
						+ ".json";
				if (fileUtil.FileExists(JsonReportPath)) {

					fileUtil.Deletefile(JsonReportPath);
					System.out.println("Deleted json file =" + ExactFailedScenario);
					logMan.info("Deleted json file =" + ExactFailedScenario);
				}
			}
		} catch (Throwable t) {
			System.out.println("Error Occured in DeleteFailureJsonFiles function, error desc =" + t.getMessage());
			logMan.error("Error Occured in DeleteFailureJsonFiles function, error desc =" + t.getMessage());
		}
		logMan.info("DeleteFailedJsonFiles Function - End");
	}

	public String matchExpressionInaFile(String Filepath, String RegExpression) {
		logMan.info("matchExpressionInaFile Function - Start");
		String returnvalue = "";
		BufferedReader br;
		StringBuilder sb;
		String line;
		String everything;
		try {
			br = new BufferedReader(new FileReader(Filepath));

			sb = new StringBuilder();
			line = br.readLine();

			while (line != null) {
				sb.append(line);
				sb.append(System.lineSeparator());
				line = br.readLine();
			}
			everything = sb.toString();
			Pattern regexp = Pattern.compile(RegExpression);
			Matcher matcher = regexp.matcher(everything);
			int matchfound = 0;
			while (matcher.find()) {

				System.out.println("Regular Expression =" + RegExpression);
				System.out.println(("Match:" + (matchfound + 1) + "=") + matcher.group(matchfound));
				logMan.info("Regular Expression =" + RegExpression);
				logMan.info(("Match:" + (matchfound + 1) + "=") + matcher.group(matchfound));

				if (returnvalue == "") {
					returnvalue = matcher.group(matchfound);
				} else {
					returnvalue = returnvalue + "/n" + matcher.group(matchfound);
				}
			}

		} catch (Throwable t) {
			logMan.error("Error Occured in matchExpressionInaFile function, error desc =" + t.getMessage());
		}
		logMan.info("matchExpressionInaFile Function - End");
		return returnvalue;
	}

	public String returnFileAsASingleString(String FilePath) {
		BufferedReader br;
		StringBuilder sb;
		String line;
		String everything = "";
		try {
			br = new BufferedReader(new FileReader(FilePath));
			sb = new StringBuilder();
			line = br.readLine();

			while (line != null) {
				sb.append(line);
				sb.append(System.lineSeparator());
				line = br.readLine();
			}
			everything = sb.toString();
			br.close();
		} catch (Throwable t) {
			System.out.println("Error Occured Inside returnFileAsASingleString function for path =" + FilePath);
		}
		return everything;
	}

	public boolean CreateFileInResources(String FileContent, String FileName) {
		logMan.info("CreateFile function - START");
		boolean returnvalue = false;
		try {
			File file = new File(System.getProperty("user.dir") + "//src//test//resources//" + FileName);
			if (file.exists()) {
				file.delete();
				logMan.info("Info= File" + FileName + " already exists , hence deleted it");
			}
			file.createNewFile();
			logMan.info("Info= A New File as " + FileName + " is created successfully");
			FileWriter fw = new FileWriter(file.getAbsoluteFile(), true);
			BufferedWriter bw = new BufferedWriter(fw);
			bw.write(FileContent);
			bw.flush();
			bw.close();
			if (file.exists()) {
				logMan.info("Info= File" + FileName + " is created successfully");
			} else {
				logMan.error("Error= File" + FileName + " creation failed");
			}

		} catch (Throwable t) {
			logMan.error("Error Occured inside CreateFile function while creating a file with name " + FileName);
		}
		logMan.info("CreateFile function - END");
		return returnvalue;
	}

}
&&&&&&&&&&&&&&&&&&&&&&&&&&&TESTEE&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

package com.boi.grp.utilities;

import java.util.AbstractMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.IntStream;
import java.util.stream.Stream;

/**
 * Created by C112083 on 23/02/2021.
 */
public class FlatMapUtil {

	private FlatMapUtil() {
		throw new AssertionError("No instances for you!");
	}

	public static Map<String, Object> flatten(Map<String, Object> map) {
		return map.entrySet().stream().flatMap(FlatMapUtil::flatten).collect(LinkedHashMap::new,
				(m, e) -> m.put("/" + e.getKey(), e.getValue()), LinkedHashMap::putAll);
	}

	private static Stream<Map.Entry<String, Object>> flatten(Map.Entry<String, Object> entry) {

		if (entry == null) {
			return Stream.empty();
		}

		if (entry.getValue() instanceof Map<?, ?>) {
			return ((Map<?, ?>) entry.getValue()).entrySet().stream().flatMap(
					e -> flatten(new AbstractMap.SimpleEntry<>(entry.getKey() + "/" + e.getKey(), e.getValue())));
		}

		if (entry.getValue() instanceof List<?>) {
			List<?> list = (List<?>) entry.getValue();
			return IntStream.range(0, list.size())
					.mapToObj(i -> new AbstractMap.SimpleEntry<String, Object>(entry.getKey() + "/" + i, list.get(i)))
					.flatMap(FlatMapUtil::flatten);
		}

		return Stream.of(entry);
	}
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&TESTEE&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

package com.boi.grp.utilities;

import java.text.SimpleDateFormat;
import java.util.Calendar;

import org.apache.log4j.Logger;
import org.apache.log4j.PropertyConfigurator;

public class LogManager {
	public Logger logger;
	private static LogManager instance = null;
	public static String ScenarioName = "";

	private LogManager() {
		Calendar cal = Calendar.getInstance();
		SimpleDateFormat sdf = new SimpleDateFormat("dd-MMM-yyyy HH_mm_ss");
		if (System.getProperty("ScenarioID") != null) {
			System.setProperty("FileName", System.getProperty("ScenarioName") + "_" + System.getProperty("ScenarioID")
					+ "-" + sdf.format(cal.getTime()) + ".Log");
		} else {
			System.setProperty("FileName",
					System.getProperty("ScenarioName") + "-" + sdf.format(cal.getTime()) + ".Log");
		}
		PropertyConfigurator.configure(System.getProperty("user.dir") + "/src/test/resources/log4j.properties");
		logger = Logger.getLogger("devpinoyLogger");
	}

	public static Logger getInstance() {
		if (ScenarioName.trim().equalsIgnoreCase(System.getProperty("ScenarioName")) == false) {
			ScenarioName = System.getProperty("ScenarioName");
			resetLogger();
		}
		if (instance == null) {
			instance = new LogManager();
		}
		return instance.logger;
	}

	public static void resetLogger() {
		instance = null;
	}
}
&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&TESTEEE&&&&&&&&&&&&&&&&&&&&&&&&&&&&

package com.boi.grp.utilities;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.IOException;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Properties;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;

public class PostRunUtility {

	public FileInputStream FIS = null;
	public static Properties Config = null;
	public static Logger logman;

	public PostRunUtility() {
		try {
			System.setProperty("ScenarioName", "PostRunLog");
			System.setProperty("ScenarioID", "PostRunId");
			logman = LogManager.getInstance();
			FIS = new FileInputStream(
					System.getProperty("user.dir") + "/src/test/java/com/boi/grp/globalconfig/GlobalConfig.properties");
			Config = new Properties();
			Config.load(FIS);
			failSafePropertyGeneration();
			generateReportProperties();
		} catch (Throwable e) {
			logman.error("Unable to create PostRun Log , error = " + e.getMessage());
		}
	}

	public static void main(String[] args) throws Throwable {
		PostRunUtility postRunUtility = new PostRunUtility();
		// System.setProperty("mavenLocalRepo","C:\\maven\\repository\\org\\aspectj\\aspectjweaver\\1.8.10\\aspectjweaver-1.8.10.jar");
		System.out.println("path = " + System.getProperty("mavenLocalRepo"));
		ReportUtils reportUtils = new ReportUtils();
		try {
			postRunUtility.logMessage("Report Type = " + System.getProperty("REPORT_TYPE"));
			switch (System.getProperty("REPORT_TYPE").toUpperCase()) {
			case "ALLURE":
				reportUtils.generateAllureReport(System.getProperty("mavenLocalRepo"));
				break;
			case "CONSOLIDATEDREPORT":
				reportUtils.generateConsolidatedReport();
				break;
			case "DEFAULT":
				reportUtils.generateCucumberDefaultReport();
				break;
			case "ALL":
				reportUtils.generateCucumberDefaultReport();
				reportUtils.generateConsolidatedReport();
				reportUtils.generateAllureReport(System.getProperty("mavenLocalRepo"));
				break;
			default:
				reportUtils.generateAllureReport(System.getProperty("mavenLocalRepo"));
				break;
			}

			postRunUtility.copyTargetFolderToReportBackupFolder();
		} catch (Throwable e) {
			postRunUtility.logError("Error in generating Report, for Report type = " + e.getMessage());
		}
	}

	public static void failSafePropertyGeneration() {
		try {
			for (Object prop : Config.keySet()) {
				if (System.getenv(prop.toString()) != null) {
					System.setProperty(prop.toString().trim().toUpperCase(), System.getenv(prop.toString()));
				} else {
					System.setProperty(prop.toString().trim().toUpperCase(), Config.getProperty(prop.toString()));
				}
			}
			// for adding report environment section
			Properties properties = new Properties();
			properties.load(new FileReader(System.getProperty("user.dir") + "/src/test/resources/report.properties"));
			for (Object prop : properties.keySet()) {
				if (System.getenv(prop.toString()) != null) {
					System.setProperty(prop.toString().trim().toUpperCase(), System.getenv(prop.toString()));
				} else {
					System.setProperty(prop.toString().trim().toUpperCase(), properties.getProperty(prop.toString()));
				}

			}
		} catch (Exception e) {
			logman.error("Error Occurred Inside failSafePropertyGenenration block in PostRun, Error Description="
					+ e.getMessage());
		}
	}

	public void logMessage(String message) {
		logman.info(message);
		System.out.println(message);
	}

	public void logError(String message) {
		logman.error(message);
		System.out.println(message);
	}

	public void copyTargetFolderToReportBackupFolder() {
		try {
			if ((!System.getProperty("RESULT_BACKUP").isEmpty())
					&& (!System.getProperty("RESULT_BACKUP").equalsIgnoreCase("NA"))) {
				SimpleDateFormat dateFormat = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
				String time = dateFormat.format(new Date());
				String appendedData = "Target_folder_generated_at_" + time.replaceAll(":", "_");
				File dir = new File(System.getProperty("RESULT_BACKUP") + "/" + appendedData);
				boolean fileFolder = dir.mkdir();
				if (fileFolder) {
					FileUtils.copyDirectory(new File(System.getProperty("user.dir") + "/target"), dir);
				}
				logMessage("Successfully copied target folder to backup folder at location = "
						+ System.getProperty("RESULT_BACKUP") + "/" + appendedData);
			}

		} catch (IOException e) {
			logError("Error in copyTargetFolderToReportFolder method, Error = " + e.getMessage());
		}
	}

	private void generateReportProperties() {
		Map<String, String> htmlReportProperties = new HashMap<String, String>();
		htmlReportProperties.put("Report Date", DateFormat.getInstance().format(new Date()));
		htmlReportProperties.put("Project Name",
				System.getProperty("PROJECT.NAME", System.getProperty("PROJECTNAME", "Not Available")));
		htmlReportProperties.put("Execution Mode", System.getProperty("TYPE", "Not Available"));
		htmlReportProperties.put("Build Number", System.getProperty("BUILD", "Not Available"));
		htmlReportProperties.put("Environment", System.getProperty("ENVIRONMENT", "Not Available"));

		switch (System.getProperty("TYPE", "").trim().toUpperCase()) {
		case "DATABASE":
			htmlReportProperties.put("Database Instance", System.getProperty("DB.HOST").toUpperCase());
			break;
		case "API":
			htmlReportProperties.put("SSL Configured", System.getProperty("SSL_CONFIGURED", "NA").toUpperCase());
			htmlReportProperties.put("SSL Handshake Mode",
					System.getProperty("SSL_HANDSHAKE_KEYSTORE_TYPE", "NA").toUpperCase());
			break;
		default:
			htmlReportProperties.put("URL", System.getProperty("DESKTOP_URL", "Not Applicable"));
			htmlReportProperties.put("Mobile URL", System.getProperty("MOBILE_URL", "Not Applicable"));
			htmlReportProperties.put("BrowserStack Host", System.getProperty("BROWSERSTACKHOST", "Not Applicable"));
			htmlReportProperties.put("Execution Browser",
					System.getProperty("PREFERRED_BROWSER", "Not Applicable").toUpperCase());
			break;
		}

		Properties prop = new Properties();
		for (Entry<String, String> reportEntry : htmlReportProperties.entrySet()) {
			prop.setProperty(reportEntry.getKey().trim(), reportEntry.getValue().trim());
		}

		try {
			FileOutputStream fos = new FileOutputStream(
					System.getProperty("user.dir") + "/target/html-report.properties");
			prop.store(fos, null);
			fos.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&TESTEE&&&&&&&&&&&&&&&&&&&&&&&&&&&&

package com.boi.grp.utilities;

import java.io.File;
import java.util.ArrayList;
import java.util.List;

import net.masterthought.cucumber.Configuration;
import net.masterthought.cucumber.ReportBuilder;
import net.masterthought.cucumber.Reportable;
import net.masterthought.cucumber.presentation.PresentationMode;

public class PrettyReport {

	public static void main(String[] args) {
		System.out.println("PostRunUtility Class method");
		File reportOutputDirectory = new File("target/consolidatedreport/");
		List<String> jsonFiles = new ArrayList<>();

//		 File f = new File("target/cucumber-parallel/");
//         int count = 0;
//         for (File file : f.listFiles()) {
//                 if (file.getName().endsWith(".json")) {
//                	 jsonFiles.add(file.getName().replaceAll(".json", ".html"));
//                 }
//         }

		String TESTREPORTS = "./target/cucumber-parallel/";
		String TESTREPORTSPARALLEL = "./target/cucumber-parallel/";
		String reportOutPutDirectory = "./target/consolidatedreportparallel/";

		final File folder = new File(TESTREPORTSPARALLEL);
		List<String> resultRep = new ArrayList<>();
		search(".*\\.json", folder, resultRep);

		for (String s : resultRep) {
			jsonFiles.add(s);
		}
		String buildNumber = "1";
		String projectName = "Base";
		boolean runWithJenkins = false;
		boolean parallelTesting = true;

		Configuration configuration = new Configuration(reportOutputDirectory, projectName);

		configuration.setBuildNumber(buildNumber);
		configuration.addClassifications("Platform", "Windows");
		configuration.addClassifications("Browser", "Firefox");
		// configuration.addClassifications("Branch", "release/1.0");

		configuration.addPresentationModes(PresentationMode.PARALLEL_TESTING);
		ReportBuilder reportBuilder = new ReportBuilder(jsonFiles, configuration);
		Reportable result = reportBuilder.generateReports();

	}

	public static void search(final String pattern, final File folder, List<String> result) {
		for (final File f : folder.listFiles()) {
			if (f.isDirectory()) {
				search(pattern, f, result);
			}
			if (f.isFile()) {
				if (f.getName().matches(pattern)) {
					result.add(f.getAbsolutePath());
				}
			}
		}
	}
}


&&&&&&&&&&&&&&&&&&&&&&&&&&&&&TESTT&&&&&&&&&&&&&&&&&&&&&&&&

package com.boi.grp.utilities;

import java.io.File;
import java.util.Collection;
import java.util.UUID;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;

public class ReportMerger {
	public Logger logman;

	public ReportMerger() {
		logman = LogManager.getInstance();
	}

	private static String reportFileName = "report.js";
	private static String reportImageExtension = "png";

	/**
	 * Merge all reports together into master report in given reportDirectory
	 * 
	 * @param reportDirectory
	 * @throws Exception
	 */
	public void mergeReports(File reportDirectory) {
		try {
			Collection<File> existingReports = FileUtils.listFiles(reportDirectory, new String[] { "js" }, true);
			File mergedReport = null;
			for (File report : existingReports) {
				// only address report files
				if (report.getName().equals(reportFileName)) {
					// rename all the image files (to give unique names) in
					// report directory and update report
					renameEmbededImages(report);
					logman.info("renameEmbededImages method called successfully");
					// if we are on the first pass, copy the directory of the
					// file to use as basis for merge
					if (mergedReport == null) {
						FileUtils.copyDirectory(report.getParentFile(), reportDirectory);
						mergedReport = new File(reportDirectory, reportFileName);
						logman.info("copy the directory of the file to use as basis for merge");
						// otherwise merge this report into existing master
						// report
					} else {
						mergeFiles(mergedReport, report);
						logman.info("merge this report into existing master report");
					}
				}
			}
		} catch (Throwable throwable) {
			logman.error("Error in merging Reports, error = " + throwable.getMessage());
		}
	}

	/**
	 * merge source file into target
	 *
	 * @param target
	 * @param source
	 */
	public void mergeFiles(File target, File source) throws Throwable {
		System.out.println(target.getAbsolutePath());
		System.out.println(source.getAbsolutePath());
		// copy embeded images
		try {
			Collection<File> embeddedImages = FileUtils.listFiles(source.getParentFile(),
					new String[] { reportImageExtension }, true);
			for (File image : embeddedImages) {
				FileUtils.copyFileToDirectory(image, target.getParentFile());
				logman.info("copy embeded images");
			}

			// merge report files
//			String targetReport = FileUtils.readFileToString(target, "UTF-8");
			String sourceReport = FileUtils.readFileToString(source, "UTF-8");

			// FileUtils.writeStringToFile(target, targetReport + sourceReport);
			FileUtils.writeStringToFile(target, sourceReport, "UTF-8", true);
			logman.info("merged report files successfully");
		} catch (Throwable e) {
			e.printStackTrace();
			System.out.println(target.getAbsolutePath());
			System.out.println(source.getAbsolutePath());
			logman.error("Error in mergingFiles, error = " + e.getMessage());
		}
	}

	/**
	 * Give unique names to embedded images to ensure they aren't lost during merge
	 * Update report file to reflect new image names
	 *
	 * @param reportFile
	 */

	public void renameEmbededImages(File reportFile) throws Throwable {
		try {
			File reportDirectory = reportFile.getParentFile();
			Collection<File> embeddedImages = FileUtils.listFiles(reportDirectory,
					new String[] { reportImageExtension }, true);

			String fileAsString = FileUtils.readFileToString(reportFile, "UTF-8");

			for (File image : embeddedImages) {
				String curImageName = image.getName();
				String uniqueImageName = UUID.randomUUID().toString() + "." + reportImageExtension;

				image.renameTo(new File(reportDirectory, uniqueImageName));
				fileAsString = fileAsString.replace(curImageName, uniqueImageName);
			}
			FileUtils.writeStringToFile(reportFile, fileAsString, "UTF-8");
			logman.info("Rename happened successfully");
		} catch (Throwable e) {
			logman.error("Error occurred in renameEmbededImages method, error = " + e.getMessage());
		}
	}
}

&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&TESTEE&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

package com.boi.grp.utilities;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UncheckedIOException;
import java.nio.file.CopyOption;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.PathMatcher;
import java.nio.file.attribute.BasicFileAttributes;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.function.BiPredicate;
import java.util.stream.Stream;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonObject;

import io.qameta.allure.ConfigurationBuilder;
import io.qameta.allure.ReportGenerator;
import net.masterthought.cucumber.Configuration;
import net.masterthought.cucumber.ReportBuilder;
import net.masterthought.cucumber.Reportable;
import net.masterthought.cucumber.presentation.PresentationMode;

/**
 * Created by C112083 on 09/11/2020.
 */
public class ReportUtils {
	public Logger logman;

	public ReportUtils() {
		logman = LogManager.getInstance();
	}

	public void invokeAspectWeaverJar(String mavenRepoPath) {
		try {
			Runtime.getRuntime().exec("java -jar " + mavenRepoPath);
			logman.info("AspectWeaver jar is invoked successfully");
		} catch (Throwable e) {
			logman.error("Error in invoking AspectWeaver jar, Error = " + e.getMessage());
		}
	}

	public void createEnvironmentXmlFile() {
		try {
			DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();
			DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();
			Document document = documentBuilder.newDocument();
			// root elements
			Element rootElement = document.createElement("environment");
			document.appendChild(rootElement);

			// first child elements
			Element parameter = document.createElement("parameter");
			rootElement.appendChild(parameter);
			// platform elements
			Element key = document.createElement("key");
			key.appendChild(document.createTextNode("PLATFORM"));
			parameter.appendChild(key);
			// value of platform
			Element value = document.createElement("value");
			value.appendChild(document.createTextNode(System.getProperty("REPORT_PLATFORM")));
			parameter.appendChild(value);

			// second child elements
			Element parameter1 = document.createElement("parameter");
			rootElement.appendChild(parameter1);
			// type elements
			Element key1 = document.createElement("key");
			key1.appendChild(document.createTextNode("TYPE"));
			parameter1.appendChild(key1);
			// value of type
			Element value1 = document.createElement("value");
			value1.appendChild(document.createTextNode(System.getProperty("REPORT_PLATFORM_TYPE")));
			parameter1.appendChild(value1);

			// third child
			Element parameter2 = document.createElement("parameter");
			rootElement.appendChild(parameter2);
			// type elements
			Element key2 = document.createElement("key");
			key2.appendChild(document.createTextNode("ENVIRONMENT"));
			parameter2.appendChild(key2);
			// value of type
			Element value2 = document.createElement("value");
			value2.appendChild(document.createTextNode(System.getProperty("ENVIRONMENT")));
			parameter2.appendChild(value2);

			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			Transformer transformer = transformerFactory.newTransformer();
			DOMSource source = new DOMSource(document);
			StreamResult result = new StreamResult(new File(
					System.getProperty("user.dir") + "/src/test/resources/allure_dependencies/environment.xml"));
			transformer.transform(source, result);
			logman.info("Environment.xml file is created successfully");
		} catch (Exception e) {
			logman.error("Error in creating Environment.xml file, Error = " + e.getMessage());
		}
	}

	public void copyEnvironmentAndCategoriesFile() {
		try {
			FileUtils.copyFile(
					new File(
							System.getProperty("user.dir") + "/src/test/resources/allure_dependencies/environment.xml"),
					new File(System.getProperty("user.dir") + "/target/allure-results/environment.xml"));
			FileUtils.copyFile(
					new File(
							System.getProperty("user.dir") + "/src/test/resources/allure_dependencies/categories.json"),
					new File(System.getProperty("user.dir") + "/target/allure-results/categories.json"));
			logman.info("Successfully copied 'Environment.xml' and 'Categories.json' file onto target folder");
		} catch (Throwable e) {
			logman.error("Error in copying 'Environment.xml' and 'Categories.json' file onto target folder, Error = "
					+ e.getMessage());
		}
	}

	public void generateAllureHtmlReport() {
		if (System.getProperty("PLATFORM").toUpperCase().equalsIgnoreCase("LINUX")) {
			// code for webdrivers.linux
		} else if (System.getProperty("PLATFORM").toUpperCase().equalsIgnoreCase("MAC")) {
			// code for webdrivers.mac
		} else {
			try {
				io.qameta.allure.core.Configuration configuration = new ConfigurationBuilder().useDefault().build();
				final ReportGenerator generator = new ReportGenerator(configuration);
				Path allureReportPath = new File(System.getProperty("user.dir") + "/target/allure-report").toPath();
				Files.createDirectories(allureReportPath);
				final Path resultsDirectory = Files.createDirectories(
						new File(System.getProperty("user.dir") + "/target/allure-results").toPath());
				generator.generate(allureReportPath, resultsDirectory);
				logman.info("Allure report generated");
			} catch (Throwable e) {
				logman.error("Error in generating Allure HTML report, Error = " + e.getMessage(), e);
			}
		}
	}

	public void generateAllureReport(String mavenRepoPath) {
		try {
			invokeAspectWeaverJar(mavenRepoPath);
			createEnvironmentXmlFile();
			copyEnvironmentAndCategoriesFile();
			generateAllureHtmlReport();
			logman.info("Allure Report generated successfully");
		} catch (Throwable e) {
			logman.error("Error in generating Allure Report, error = " + e.getMessage(), e);
		}
	}

	public void generateConsolidatedReport() {
		try {
			File reportOutputDirectory = new File("target/consolidatedreport/");
			List<String> jsonFiles = new ArrayList<>();
			String TESTREPORTSPARALLEL = "./target/cucumber-parallel/";

			String TmpParallelReports = "./target/cucumber-parallel-tmp/";
			final File folder = new File(TmpParallelReports);
			FileUtils.deleteDirectory(folder);
			folder.mkdirs();

			PathMatcher matcher = file -> file.getFileName().toString().endsWith(".json");
			copyFiles(new File(TESTREPORTSPARALLEL), folder, matcher);

			List<String> resultRep = new ArrayList<>();
			search(".*\\.json", folder, resultRep);
			logman.info("Searching of JSON files under cucumber-parallel is completed");

            for(String s: resultRep){
                jsonFiles.add(s);
            }
            String buildNumber = "1";
            String projectName = "P1-Regression-Suite";

			Configuration configuration = new Configuration(reportOutputDirectory, System.getProperty("PROJECT.NAME"));
			configuration.setBuildNumber(System.getProperty("BUILD.NUMBER"));
			configuration.addClassifications("PLATFORM", System.getProperty("REPORT_PLATFORM"));
			configuration.addClassifications("TYPE", System.getProperty("REPORT_PLATFORM_TYPE"));
			configuration.addClassifications("ENVIRONMENT", System.getProperty("ENVIRONMENT"));
			configuration.addPresentationModes(PresentationMode.PARALLEL_TESTING);
			ReportBuilder reportBuilder = new ReportBuilder(jsonFiles, configuration);
//			Reportable result = reportBuilder.generateReports();
			reportBuilder.generateReports();
			logman.info("Cucumber Jenkins Report generated successfully");
		} catch (Throwable e) {
			logman.error("Error in generating Cucumber Jenkins Report, error = " + e.getMessage());
		}
	}

	public void search(final String pattern, final File folder, List<String> result) {
		try {
			for (final File f : folder.listFiles()) {
				if (f.isDirectory()) {
					search(pattern, f, result);
				}
				if (f.isFile()) {
					if (f.getName().matches(pattern)) {
						result.add(f.getAbsolutePath());
					}
				}
			}
			logman.info("Json files has been added into List");
		} catch (Exception e) {
			logman.error("Error in searching JSON files , error = " + e.getMessage());
		}
	}

	public void copyFiles(File src, File dest, PathMatcher matcher, CopyOption... copyOptions) throws IOException {
		Objects.requireNonNull(matcher);
		Objects.requireNonNull(copyOptions);

		BiPredicate<Path, BasicFileAttributes> filter = (path, attributes) -> attributes.isRegularFile()
				&& matcher.matches(path);

		try (Stream<Path> files = Files.find(src.toPath(), Integer.MAX_VALUE, filter)) {
			files.forEach(file -> {
				try {
//					if (System.getProperty("UPDATE_FEATURE_OVERVIEW", "").equalsIgnoreCase("YES")) {
					Path destFile = dest.toPath().resolve(src.toPath().relativize(file));
					updateResultJson(file.toFile(), destFile.toFile());
//					} else {
//						FileUtils.copyFileToDirectory(file.toFile(), dest);
//					}
				}
				// Stream methods do not allow checked exceptions, have to wrap it
				catch (IOException ioException) {
					throw new UncheckedIOException(ioException);
				}
			});
		} catch (UncheckedIOException uncheckedIoException) {
			throw new IOException(uncheckedIoException);
		}
	}

	private void updateResultJson(File srcFile, File targetFile) throws IOException {
		Gson gson = new Gson();
		FileReader jsonFileSrc = new FileReader(srcFile);
		JsonArray jsonRoot = gson.fromJson(jsonFileSrc, JsonArray.class);
		for (int counter = 0; counter < jsonRoot.size(); counter++) {
			JsonObject jsonArrElem1 = jsonRoot.get(counter).getAsJsonObject();
			String scenarioName = jsonArrElem1.get("elements").getAsJsonArray().get(0).getAsJsonObject().get("name")
					.getAsString();
			jsonArrElem1.add("feature_name_placeholder", jsonArrElem1.get("name"));
			jsonArrElem1.addProperty("name", scenarioName);
			jsonRoot.set(counter, jsonArrElem1);
			FileUtils.writeStringToFile(targetFile, jsonRoot.toString(), "UTF-8", true);
		}
		jsonFileSrc.close();
	}

	public void generateCucumberDefaultReport() {
		File reportDirectory = new File(System.getProperty("user.dir") + "/target/cucumber-parallel");
		if (reportDirectory.exists()) {
			ReportMerger reportMerger = new ReportMerger();
			try {
				reportMerger.mergeReports(reportDirectory);
				logman.info("Individual reports are merged successfully for Default Report");
			} catch (Throwable e) {
				logman.error("Error in generating default report, error = " + e.getMessage());
			}
		}
	}
}


&&&&&&&&&&&&&&&&&&&&&&&&&&TESTEEE&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&

package com.boi.grp.utilities;

import static io.restassured.RestAssured.config;
import static io.restassured.RestAssured.given;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.lang.reflect.Type;
import java.nio.charset.StandardCharsets;
import java.security.KeyStore;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.concurrent.TimeUnit;

import javax.net.ssl.KeyManager;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManager;
import javax.net.ssl.X509TrustManager;

import org.apache.commons.io.FileUtils;
import org.apache.http.conn.ssl.AllowAllHostnameVerifier;
import org.apache.http.conn.ssl.SSLSocketFactory;
import org.apache.log4j.Logger;
import org.json.JSONArray;
import org.json.JSONObject;
import org.junit.Assert;

import com.boi.grp.pageobjects.BasePage;
import com.boi.grp.utilities.FlatMapUtil;
import com.boi.grp.utilities.LogManager;
import com.google.common.collect.MapDifference;
import com.google.common.collect.Maps;
import com.google.gson.Gson;
import com.google.gson.JsonSyntaxException;
import com.google.gson.reflect.TypeToken;

import io.restassured.RestAssured;
import io.restassured.config.RestAssuredConfig;
import io.restassured.config.SSLConfig;
import io.restassured.http.ContentType;
import io.restassured.http.Header;
import io.restassured.http.Headers;
import io.restassured.path.json.JsonPath;
import io.restassured.response.Response;

public class RestHelper extends BasePage {
	private Map<String, String> authenticationHeaders;
	private Logger logMan = null;
	private RestAssuredConfig restAssuredConfig = config;
	private String value;

	public RestHelper() {
		logMan = LogManager.getInstance();
		configureSSL();
	}

	public RestHelper(Map<String, String> authenticationDetails) {
		logMan = LogManager.getInstance();
		configureSSL();
		setAuthenticationHeaders(authenticationDetails);
	}

	public void setAuthenticationHeaders(Map<String, String> authenticationDetails) {
		this.authenticationHeaders = authenticationDetails;
	}

	public Response postMessageByMessageBody(String serviceURLPart, String messageBody) {
		return postMessageByMessageBody(serviceURLPart, messageBody, authenticationHeaders);
	}

	public Response postMessageByMessageBody(String serviceURLPart, String messageBody, ContentType contentType) {
		return postMessageByMessageBody(serviceURLPart, messageBody, authenticationHeaders, contentType);
	}

	public Response postMessageByMessageBody(String serviceURLPart, String messageBody,
			Map<String, String> authenticationDetails) {
		return postMessageByMessageBody(serviceURLPart, messageBody, authenticationDetails, ContentType.JSON);
	}

	public Response getMessage(String serviceURLPart) {
		return getMessage(serviceURLPart, authenticationHeaders);
	}

	public Response postMessageByMessageBodyContentTypeXML(String serviceURLPart, String messageBody,
			ContentType contentType) {
		return postMessageByMessageBody(serviceURLPart, messageBody, authenticationHeaders, contentType);
	}

	public Response postMessageByMessageBodyContentTypeXML(String serviceURLPart, String messageBody) {
		return postMessageByMessageBody(serviceURLPart, messageBody, authenticationHeaders, ContentType.XML);
	}

	public Response postMessageByMessageBodyContentTypeXML(String serviceURLPart, String messageBody,
			Map<String, String> authenticationDetails) {
		return postMessageByMessageBody(serviceURLPart, messageBody, authenticationDetails, ContentType.XML);
	}

	private Response postMessageByMessageBody(String serviceURLPart, String messageBody,
			Map<String, String> authenticationDetails, ContentType contentType) {
		Response response = null;
		try {
			logMan.info("---------------------------POST URL START--------------------------------");
			logMan.debug("Posting URL=" + serviceURLPart);
			logMan.info("----------------------------POST URL END-------------------------------");
			logMan.info("---------------------------REQUEST BODY START--------------------------------");
			logMan.debug("Posting request as-\n\n" + messageBody);
			logMan.info("----------------------------REQUEST BODY END-------------------------------");
			response = given().config(restAssuredConfig).config(restAssuredConfig).headers(authenticationDetails)
					.contentType(contentType).body(messageBody).post(serviceURLPart);

			logMan.info("--------------------------RESPONSE BODY START---------------------------------");
			logMan.debug("Response Generated successfully and has value =\n\n" + response.asString());
			logMan.info("----------------------------RESPONSE BODY END-------------------------------");
		} catch (Throwable t) {
			logMan.error("Error Occured Inside PostMessageByMessageBody function while posting at URL ="
					+ serviceURLPart + " , Messagebody= " + messageBody, t);
			Assert.assertTrue("Unable to connect to Service or Error Occurred inside PostMessageByMessageBody function",
					0 > 1);
		}

		return response;
	}

	public Response updateMessageWithoutBody(String serviceURLPart) {
		return updateMessage(serviceURLPart, null, ContentType.JSON);
	}

	public Response updateMessageWithBody(String serviceURLPart, String messageBody) {
		return updateMessage(serviceURLPart, null, ContentType.JSON);
	}

	public Response updateMessageWithXMLBody(String serviceURLPart, String messageBody) {
		return updateMessage(serviceURLPart, null, ContentType.XML);
	}

	private Response updateMessage(String serviceURLPart, String messageBody, ContentType contentType) {
		Response response = null;
		messageBody = messageBody == null ? "" : messageBody;
		try {
			logMan.info("---------------------------PUT URL START--------------------------------");
			logMan.debug("Put URL=" + serviceURLPart);
			logMan.info("----------------------------PUT URL END-------------------------------");
			logMan.info("---------------------------REQUEST BODY START--------------------------------");
			logMan.debug("Put request as-\n\n" + messageBody);
			logMan.info("----------------------------REQUEST BODY END-------------------------------");
			response = given().config(restAssuredConfig).config(restAssuredConfig).headers(authenticationHeaders)
					.contentType(contentType).body(messageBody).when().put(serviceURLPart);
			String returnedStatisCode = String.valueOf(response.getStatusCode());
			logMan.info("--------------------------RESPONSE BODY START---------------------------------");
			if (returnedStatisCode.equalsIgnoreCase("200")) {
				logMan.info("UpdateUsingPutMessage function Executed successfully, response =" + response.asString());
			} else {
				logMan.error("Error Occured while Update using UpdateUsingPutMessage function, returnedStatisCode="
						+ returnedStatisCode + ",URL=" + serviceURLPart + ", Error Descripton=" + response.asString());
			}
			logMan.info("----------------------------RESPONSE BODY END-------------------------------");
		} catch (Throwable t) {
			logMan.error("Error Occured Inside UpdateUsingGetMessage function while updating using PUT" + serviceURLPart
					+ ",Error Description=" + t.getMessage(), t);
		}
		return response;
	}

	public Response getMessage(String serviceURLPart, Map<String, String> authenticationDetails) {
		logMan.info("GetMessage function START");
		Response response = null;
		try {
			logMan.info("---------------------------GET URL START--------------------------------");
			logMan.debug("Get Method, URL=" + serviceURLPart);
			logMan.info("----------------------------GET URL END-------------------------------");
			response = given().config(restAssuredConfig).headers(authenticationDetails).when().get(serviceURLPart);
			logMan.info("GetMessage function END");

			logMan.info("--------------------------RESPONSE BODY START---------------------------------");
			logMan.debug("Response Generated successfully and has value =\n\n" + response.asString());
			logMan.info("----------------------------RESPONSE BODY END-------------------------------");

		} catch (Throwable t) {
			logMan.error("Error Occured Inside GetMessage function while posting at URL =" + serviceURLPart
					+ " , Error= " + t.getMessage(), t);
			Assert.assertTrue("Unable to connect to Service or Error Occurred inside GETMessage function", 0 > 1);
		}
		return response;
	}

	public String returnFileAsASingleString(String filePath) {
		String everything = "";
		try {
			everything = FileUtils.readFileToString(new File(filePath), StandardCharsets.UTF_8);
			logMan.debug("File read successfully, file path=" + filePath);
		} catch (Throwable t) {
			logMan.error("Error Occured Inside returnFileAsASingleString function for path =" + filePath, t);
		}

		return everything;
	}

	private void configureSSL() {
		if (System.getProperty("SSL_CONFIGURED").equalsIgnoreCase("Yes")) {
			SSLConfig sslConfig = new SSLConfig();
			switch (System.getProperty("SSL_HANDSHAKE_KEYSTORE_TYPE").trim().toUpperCase()) {
			case "JKS":
				sslConfig = getJKSConfig();
				break;
			case "P12":
			case "PKCS":
			case "PKCS12":
				sslConfig = getPKCSConfig();
				break;
			}
			restAssuredConfig = RestAssured.config().sslConfig(sslConfig);
		}
	}

	@SuppressWarnings("deprecation")
	private SSLConfig getJKSConfig() {
		SSLConfig config = SSLConfig.sslConfig();
		try {
			String keyStoreJKS = System.getProperty("KEYSTORE_JKS_FILE");
			String keyStorePassword = System.getProperty("KEYSTORE_PASSWORD");
			String trustStoreJKS = System.getProperty("TRUSTSTORE_JKS_FILE");
			String trustStorePassword = System.getProperty("TRUSTSTORE_PASSWORD");

			KeyStore keyStore = KeyStore.getInstance("JKS");
			KeyStore trustStore = KeyStore.getInstance("JKS");

			String jksPath = System.getProperty("CERTIFICATE_INFO_PATH");
			if (jksPath == null)
				jksPath = Thread.currentThread().getContextClassLoader()
						.getResource("certs/" + System.getProperty("ENVIRONMENT") + "/jks/").getPath();

			keyStore.load(new FileInputStream(jksPath + "/" + keyStoreJKS), keyStorePassword.toCharArray());
			trustStore.load(new FileInputStream(jksPath + "/" + trustStoreJKS), trustStorePassword.toCharArray());

			SSLSocketFactory sslSocketFactory = new SSLSocketFactory(keyStore, keyStorePassword, trustStore);
			sslSocketFactory.setHostnameVerifier(SSLSocketFactory.ALLOW_ALL_HOSTNAME_VERIFIER);
			config = SSLConfig.sslConfig().with().sslSocketFactory(sslSocketFactory).and().allowAllHostnames();
		} catch (Exception e) {
			logMan.error("Error while loading keystore  or trustStore>>>>>>>>>", e);
		}
		return config;
	}

	@SuppressWarnings("deprecation")
	private SSLConfig getPKCSConfig() {
		SSLConfig config = SSLConfig.sslConfig();
		try {
			String pcksFile = System.getProperty("PKCS_FILE");
			String pkcsPassword = System.getProperty("PKCS_PASSWORD");

			KeyStore keyStore = KeyStore.getInstance("PKCS12");
			String p12Path = System.getProperty("CERTIFICATE_INFO_PATH", Thread.currentThread().getContextClassLoader()
					.getResource("certs/" + System.getProperty("ENVIRONMENT") + "/p12/").getPath());
			keyStore.load(new FileInputStream(p12Path + "/" + pcksFile), pkcsPassword.toCharArray());

			KeyManagerFactory keyManagerFactory = KeyManagerFactory
					.getInstance(KeyManagerFactory.getDefaultAlgorithm());
			keyManagerFactory.init(keyStore, pkcsPassword.toCharArray());
			KeyManager[] keyManagers = keyManagerFactory.getKeyManagers();

			TrustManager[] trustManagers = new TrustManager[] { new X509TrustManager() {
				@Override
				public void checkClientTrusted(java.security.cert.X509Certificate[] chain, String authType) {
				}

				@Override
				public void checkServerTrusted(java.security.cert.X509Certificate[] chain, String authType) {
				}

				@Override
				public java.security.cert.X509Certificate[] getAcceptedIssuers() {
					return new java.security.cert.X509Certificate[] {};
				}
			} };

			SSLContext sslContext = SSLContext.getInstance("TLS");
			sslContext.init(keyManagers, trustManagers, new SecureRandom());
			SSLSocketFactory sslSocketFactory = new SSLSocketFactory(sslContext, new AllowAllHostnameVerifier());

			config = SSLConfig.sslConfig().with().sslSocketFactory(sslSocketFactory).and()
					.x509HostnameVerifier(new AllowAllHostnameVerifier());

		} catch (Exception ex) {
			System.out.println("Error while loading keystore  or trustStore>>>>>>>>>");
			ex.printStackTrace();
		}
		return config;
	}

	/**
	 * This method is used to compare Two Json String
	 * @param expectedJson
	 * @param actualJson
	 * @return List of String comprising of all the mismatches found between two
	 *         JSON Strings
	 * @throws JsonSyntaxException
	 * @author C112083
	 * @modifiedDate 23/03/21
	 */
	public List<String> compareJsonSchema(String expectedJson, String actualJson) {
		List<String> finalList = new ArrayList<String>();
		try {
			List<String> list = new ArrayList<String>();
			Gson gson = new Gson();
			Type mapType = new TypeToken<Map<String, Object>>() {
			}.getType();
			Map<String, Object> firstMap = gson.fromJson(expectedJson, mapType);
			Map<String, Object> secondMap = gson.fromJson(actualJson, mapType);

			Map<String, Object> leftFlatMap = FlatMapUtil.flatten(firstMap);
			Map<String, Object> rightFlatMap = FlatMapUtil.flatten(secondMap);
			MapDifference<String, Object> difference = Maps.difference(leftFlatMap, rightFlatMap);

			difference.entriesOnlyOnLeft()
					.forEach((key, value) -> list.add("Present only in Expected Json " + key + ": " + value));

			difference.entriesOnlyOnRight()
					.forEach((key, value) -> list.add("Present only in Actual Json " + key + ": " + value));

			difference.entriesDiffering()
					.forEach((key, value) -> list.add("Mismatch on common values " + key + ": " + value));

			finalList.addAll(list);
			// System.out.println(list.toString());
		} catch (JsonSyntaxException e) {
			logMan.error("Error in JSON comparison , error = " + e.getMessage());
		}
		return finalList;
	}

	public String fnCreateFinalUrlEndpoint(String baseURL, String sURI) {
		String baseFinalURI = null;
		try {
			baseFinalURI = baseURL + sURI;
			insertMessageToHtmlReport("Final Endpoint created successfully " + baseFinalURI);
			// step("Final Endpoint created successfully "+baseFinalURI);
		} catch (Exception e) {
			injectErrorToCucumberReport("Final Endpoint NOT created successfully " + baseFinalURI);
			// step("Final Endpoint NOT created successfully "+baseFinalURI);
			logMan.error("Error in fnCreateFinalUrlEndpoint method, Error = " + e.getMessage());
		}
		return baseFinalURI;
	}

	public boolean validateExceptedAndActualWithHelpOfJsonPath(Response result, String jsonPath, String expectedValue) {
		boolean returnValue = false;
		try {
			String actualValue = result.jsonPath().getString(jsonPath);
			if (actualValue.equalsIgnoreCase(expectedValue)) {
				Assert.assertTrue(
						"Matched successfully, Expected = " + expectedValue + " and Actual value = " + actualValue,
						true);
				insertMessageToHtmlReport(
						"Matched Successfully , Expected = " + expectedValue + " and Actual = " + actualValue);
				insertMessageToHtmlReport("Response = " + result.asString());
				logMessage("Matched Successfully , Expected = " + expectedValue + " and Actual = " + actualValue);
				returnValue = true;
			} else {
				logMan.error("Mismatch in Expected and Actual. Expected value = " + expectedValue
						+ " and Actual value = " + actualValue);
				insertErrorMessageToHtmlReport("Mismatch in Expected and Actual. Expected value = " + expectedValue
						+ " and Actual value = " + actualValue);
				insertErrorMessageToHtmlReport("Response = " + result.asString());
				Assert.assertTrue("Mismatch in  Expected and Actual. Expected value = " + expectedValue
						+ " and Actual value = " + actualValue, false);
			}
		} catch (Exception t) {
			logMan.error("Error occurred in validateExceptedAndActualWithHelpOfJsonPath matching, Error = "
					+ t.getMessage());
		}
		return returnValue;
	}

	public void validateResponseStatusCode(Response response, int estatusCode) {
		try {
			if (response.getStatusCode() == Integer.valueOf(estatusCode)) {
				insertMessageToHtmlReport("Status code matched successfully. Expected Code =  " + estatusCode
						+ " Actual code = " + response.getStatusCode());
				Assert.assertTrue("Status code is matched successfully  " + estatusCode, true);
			} else {
				insertErrorMessageToHtmlReport("Status code NOT matched successfully. Expected code = " + estatusCode
						+ " Actual code = " + response.getStatusCode());
				logMan.error("Error: Mismatch in request code and response code. Expected code = " + estatusCode
						+ " Actual code = " + String.valueOf(response.getStatusCode()));
				Assert.assertTrue("Error: Mismatch in request code and response code. Expected code = " + estatusCode
						+ " Actual code = " + String.valueOf(response.getStatusCode()), false);
			}

		} catch (Exception e) {
			// insertErrorMessageToHtmlReport("Error occured in Response status code
			// "+response.getStatusCode());
			logMan.error("Error occured in Response status code");
			logMan.error("Error description : " + e.getMessage());
		}
	}

	public void validateResponseStatusLine(Response response, String estatusLine) {

		try {
			String astatusLine = response.getStatusLine();
			Assert.assertEquals("Correct Response status line ", estatusLine, astatusLine);
			insertMessageToHtmlReport("Response line actual value matched successfully " + response.getStatusLine());
			logMan.info("Response line actual value and matched successfully " + response.getStatusLine());

		} catch (Exception e) {
			logMan.error("Error occured in Response status line");
			insertErrorMessageToHtmlReport("Response line actual value NOT matched successfully " + e.getMessage());
			logMan.error("Error description : " + e.getMessage());
		}
	}

	public void validateResponseContentType(Response response, String econtentType) {
		try {
			String aRContentType = response.getContentType();
			Assert.assertEquals("Correct Response content type ", econtentType, aRContentType);
			insertMessageToHtmlReport("Content type matched successfully " + aRContentType);
			logMan.info("Content type matched successfully " + aRContentType);
		} catch (Exception e) {
			insertErrorMessageToHtmlReport("Content type NOT matched successfully " + e.getMessage());
			logMan.error("Error occured in Response in Content Type");
			logMan.error("Error description : " + e.getMessage());
		}
	}

	public void printResponseHeader(Response response) {

		try {
			Headers allHeaders = response.headers();
			for (Header header : allHeaders) {
				injectMessageToCucumberReport("Key: " + header.getName() + " Value: " + header.getValue());
				logMan.info("Key: " + header.getName() + " Value: " + header.getValue());
			}
		} catch (Exception e) {
			logMan.error("Error occured in Print Response headers");
			logMan.error("Error description : " + e.getMessage());
		}
	}

	public void printResponseBody(Response response) {
		try {
			String responseBody = response.getBody().prettyPrint();
			logMan.info("Response body is : " + responseBody);
			insertMessageToHtmlReport("Response body is : " + responseBody);
		} catch (Exception e) {
			insertErrorMessageToHtmlReport("Error occured in Print Response headers");
			logMan.error("Error occured in Print Response headers");
			logMan.error("Error description : " + e.getMessage());
		}
	}

	public void printResponseTime(Response response) {
		try {
			long responseTime = response.getTimeIn(TimeUnit.MILLISECONDS);
			insertMessageToHtmlReport("Response time is : " + responseTime);
			logMan.info("Response time is : " + responseTime);
		} catch (Exception e) {
			logMan.error("Error occured in Print Response headers");
			logMan.error("Error description : " + e.getMessage());
		}
	}

	public void validateTagValue(Response response, String key) {

		try {
			String resp = response.asString();
			JsonPath js = new JsonPath(resp);
			String[] splitVal = key.split(":");

			String tagKey = splitVal[0].toString();
			String tagValue = splitVal[1].toString();
			String acTagValue = response.path(tagKey);

			if (acTagValue.equals(tagValue)) {
				insertMessageToHtmlReport("Tag value matched successfully ");
				// step("Tag value matched successfully ");
				logMan.info("Tag value matched successfully");
			} else {
				insertErrorMessageToHtmlReport("Tag value NOT matched successfully ");
				logMan.error("Tag value NOT matched successfully");
			}
		} catch (Exception e) {
			logMan.error("Error in validateTagValue method, Error = " + e.getMessage());
		}
	}

	public void validateResponseBodyReceived(Response response) {

		String respBody = response.asString();
		if (respBody.isEmpty()) {
			insertErrorMessageToHtmlReport("Response body is empty ");
			logMan.error("Response body is empty ");
		} else {
			insertMessageToHtmlReport("Response body is received successfully ");
			logMessage("Response body is received successfully");
		}
	}

	public void validateBodyContains(Response response, String strBodyValue) {

		try {
			String responseBody = response.getBody().asString();
			Assert.assertTrue("Response body contains : ", responseBody.contains(strBodyValue));
			insertMessageToHtmlReport("Response Body contains : " + strBodyValue);
			logMan.info("Response Body contains : " + responseBody);
		} catch (Exception e) {
			insertErrorMessageToHtmlReport("Error occured in Body contains function");
			logMan.error("Error occured in Body contains function");
			logMan.error("Error description : " + e.getMessage());
		}
	}

	public void validateBodyContainsMultipleKeyTags(Response response, String strTagValue) {

		try {
			String responseBody = response.getBody().asString();
			String[] ArrsplitVal = strTagValue.split("\\|");
			for (String currVal : ArrsplitVal) {
				Assert.assertTrue("Response body contains : ", responseBody.contains(currVal));
				insertMessageToHtmlReport("Response Body contains : " + currVal);
				logMan.info("Response Body contains : " + currVal);
			}
		} catch (Exception e) {
			insertErrorMessageToHtmlReport("Response Body DOESNOT contains the required tag ");
			logMan.error("Error occured in Body contains function");
			logMan.error("Error description : " + e.getMessage());
		}
	}

	public void setValueForJsonKey(JSONObject jsonObject, String key) {
		this.value = (String) jsonObject.get(key);
		// return jsonObject.get(key);
	}

	public String getValueForJsonKey() {
		// to fetch the value, first call parseJson method and then call this method
		return value;
	}

	public void parseJson(JSONObject json, String key) {
		try {
			boolean keyExists = json.has(key);
			Iterator<?> iterator;
			String nextKey;
			if (!keyExists) {
				iterator = json.keys();
				while (iterator.hasNext()) {
					nextKey = (String) iterator.next();
					try {
						if (json.get(nextKey) instanceof JSONObject) {
							if (keyExists == false) {
								parseJson(json.getJSONObject(nextKey), key);
							}

						} else if (json.get(nextKey) instanceof JSONArray) {
							JSONArray jsonArray = json.getJSONArray(nextKey);
							for (int i = 0; i < jsonArray.length(); i++) {
								String jsonArrayString = jsonArray.get(i).toString();
								JSONObject innerJsonObject = new JSONObject(jsonArrayString);
								if (keyExists == false) {
									parseJson(innerJsonObject, key);
								}
							}
						}

					} catch (Exception e) {
						logMan.error("Error in Json parsing, Error= " + e.getMessage());
					}
				}
			} else {
				setValueForJsonKey(json, key);
			}
		} catch (Exception e) {
			logMan.error("Error in parseJson method, Error = " + e.getMessage());
		}
	}

	public String parseJsonPayload(String filePath, String parameter) {
		String value = null;
		try {
			Map<String, Map<String, String>> deSerialData = getDeserializeDataForJsonPayLoad();
			Map<String, String> data = deSerialData.get(parameter);

			BufferedReader bufferedReader = new BufferedReader(new FileReader(filePath));
			String line = bufferedReader.readLine();
			StringBuilder builder = new StringBuilder();
			while (line != null) {
				builder.append(line);
				line = bufferedReader.readLine();
			}
			value = builder.toString();

			int regexIndex = value.indexOf("$");
			while (regexIndex < value.length()) {
				int nextRegexIndex = value.indexOf("$", regexIndex + 1);
				String keyNameWithRegex = value.substring(regexIndex, nextRegexIndex + 1);
				String keyName = keyNameWithRegex.replaceAll("\\$", "");
				if (data.containsKey(keyName)) {
					String valueToBeReplaced = data.get(keyName);
					if (valueToBeReplaced.equalsIgnoreCase("NA")) {
						int colonIndex = value.lastIndexOf(":", regexIndex);
						int tempIndex = value.lastIndexOf("\"", colonIndex);
						int keyIndex = value.lastIndexOf("\"", tempIndex - 1);

						int firstQuotesIndex = value.indexOf("\"", regexIndex);
						int secondQuotesIndex = value.indexOf("\"", firstQuotesIndex + 1);
						if (secondQuotesIndex == -1) {
							secondQuotesIndex = firstQuotesIndex + 1;
						}

						String firstPart = value.substring(0, keyIndex);
						String secondPart = value.substring(secondQuotesIndex);

						value = firstPart + secondPart;
						regexIndex = value.indexOf("$");
						if (regexIndex == -1) {
							break;
						}
					} else {
						String firstPart = value.substring(0, regexIndex);
						String secondPart = value.substring(nextRegexIndex + 1);
						value = firstPart + valueToBeReplaced + secondPart;
						regexIndex = value.indexOf("$");
						if (regexIndex == -1) {
							break;
						}
					}

				} else {
					logMan.error("Please check the columnName written in jsonPayload with key as, = " + keyName);
				}
			}
			System.out.println(value);
		} catch (Throwable e) {
			logMan.error("Error in parseJsonPayload method, Error = " + e.getMessage());
		}
		return value;
	}

	public String parseExpectedJsonResponseFromTextFile(String fileName, Map<String, String> data) {
		String value = null;
		String responsePath = System.getProperty("user.dir") + "/src/test/java/com/boi/grp/response/";
		try {
			BufferedReader bufferedReader = new BufferedReader(new FileReader(responsePath + fileName));
			String line = bufferedReader.readLine();
			StringBuilder builder = new StringBuilder();
			while (line != null) {
				builder.append(line);
				line = bufferedReader.readLine();
			}
			value = builder.toString();
			if (data.size() > 0) {
				int regexIndex = value.indexOf("$");
				if (!(regexIndex == -1)) {
					while (regexIndex < value.length()) {
						int nextRegexIndex = value.indexOf("$", regexIndex + 1);
						String keyNameWithRegex = value.substring(regexIndex, nextRegexIndex + 1);
						String keyName = keyNameWithRegex.replaceAll("\\$", "");
						if (data.containsKey(keyName)) {
							String valueToBeReplaced = data.get(keyName);
							String firstPart = value.substring(0, regexIndex);
							String secondPart = value.substring(nextRegexIndex + 1);
							value = firstPart + valueToBeReplaced + secondPart;
							regexIndex = value.indexOf("$");
							if (regexIndex == -1) {
								break;
							}
						} else {
							logMan.error(
									"Please check the columnName written in jsonPayload with key as, = " + keyName);
						}
					}
				}
			}
			System.out.println(value);
		} catch (Throwable e) {
			logMan.error("Error in parseJsonPayload method, Error = " + e.getMessage());
		}
		return value;
	}

	public Map<String, Map<String, String>> getDeserializeDataForJsonPayLoad() {
		Map<String, Map<String, String>> mappedData = new HashMap<String, Map<String, String>>();

		try {
			FileInputStream fis = new FileInputStream(System.getProperty("user.dir") + "/target/jsonPayLoadData");
			ObjectInputStream ois = new ObjectInputStream(fis);
			mappedData = (Map<String, Map<String, String>>) ois.readObject();
			ois.close();
			fis.close();
		} catch (IOException e) {
			logMan.error("Error in getDeserializeDataForMCConfiguration, Error = " + e.getMessage());
			return mappedData;
		} catch (ClassNotFoundException e) {
			logMan.error("Class not found, Error = " + e.getMessage());
			return mappedData;
		}
		logMan.info("Deserialization of excel data is complete");
		return mappedData;
	}

	public Map<String, String> setHeader(String key, String value) {
		Map<String, String> map = new HashMap<String, String>();
		map.put(key, value);
		map.put("", "");
		this.authenticationHeaders.putAll(map);
		return map;
	}
}
